{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation \u00b6 Add this in your app's build.gradle file: ext { kFormMasterVersion = [ Latest ] } implementation \"com.thejuki:k-form-master:$kFormMasterVersion\" How to use \u00b6 Step 1. Add a RecyclerView anywhere in the layout where you want your list to be shown (If confused, look at the examples in this repo). <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.recyclerview.widget.RecyclerView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:orientation= \"vertical\" android:id= \"@+id/recyclerView\" android:divider= \"#b5b5b5\" app:layoutManager= \"androidx.recyclerview.widget.LinearLayoutManager\" android:descendantFocusability= \"beforeDescendants\" /> Step 2 (No DSL). Add the Form Elements programmatically in your activity // Initialize variables formBuilder = FormBuildHelper () formBuilder . attachRecyclerView ( binding . recyclerView ) val elements : MutableList < BaseFormElement <*>> = mutableListOf () // Declare form elements val emailElement = FormEmailEditTextElement ( Email . ordinal ). apply { title = getString ( R . string . email ) } elements . add ( emailElement ) val passwordElement = FormPasswordEditTextElement ( Password . ordinal ). apply { title = getString ( R . string . password ) } elements . add ( passwordElement ) // Add form elements (Form is refreshed for you) formBuilder . addFormElements ( elements ) Step 2 (With DSL). Add the Form Elements programmatically in your activity formBuilder = form ( binding . recyclerView ) { email ( Email . ordinal ) { title = getString ( R . string . email ) } password ( Password . ordinal ) { title = getString ( R . string . password ) } }","title":"Getting Started"},{"location":"#installation","text":"Add this in your app's build.gradle file: ext { kFormMasterVersion = [ Latest ] } implementation \"com.thejuki:k-form-master:$kFormMasterVersion\"","title":"Installation"},{"location":"#how-to-use","text":"Step 1. Add a RecyclerView anywhere in the layout where you want your list to be shown (If confused, look at the examples in this repo). <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.recyclerview.widget.RecyclerView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:orientation= \"vertical\" android:id= \"@+id/recyclerView\" android:divider= \"#b5b5b5\" app:layoutManager= \"androidx.recyclerview.widget.LinearLayoutManager\" android:descendantFocusability= \"beforeDescendants\" /> Step 2 (No DSL). Add the Form Elements programmatically in your activity // Initialize variables formBuilder = FormBuildHelper () formBuilder . attachRecyclerView ( binding . recyclerView ) val elements : MutableList < BaseFormElement <*>> = mutableListOf () // Declare form elements val emailElement = FormEmailEditTextElement ( Email . ordinal ). apply { title = getString ( R . string . email ) } elements . add ( emailElement ) val passwordElement = FormPasswordEditTextElement ( Password . ordinal ). apply { title = getString ( R . string . password ) } elements . add ( passwordElement ) // Add form elements (Form is refreshed for you) formBuilder . addFormElements ( elements ) Step 2 (With DSL). Add the Form Elements programmatically in your activity formBuilder = form ( binding . recyclerView ) { email ( Email . ordinal ) { title = getString ( R . string . email ) } password ( Password . ordinal ) { title = getString ( R . string . password ) } }","title":"How to use"},{"location":"helper/","text":"Cache Form Elements \u00b6 By default, RecyclerView will cache 2 views. By setting cacheForm = true in the FormBuildHelper, all form elements will be cached instead of recycled. NOTE: This is enabled by default. Set form element value change listener to get changed value instantly \u00b6 While creating a new instance of FormBuildHelper, add a listener in the constructor. var formBuilder = FormBuildHelper ( object : OnFormElementValueChangedListener { override fun onValueChanged ( formElement : BaseFormElement <*>) { // do anything here with formElement.value } }, findViewById ( R . id . recyclerView ), cacheForm = true ) Get value for unique form elements \u00b6 Use the unique tag assigned earlier to retrieve value (See examples in this repo). val element = formBuilder . getFormElement < FormEmailEditTextElement >( Email . ordinal ) val value : String = element . value Use the added index of the element instead if you did not assign a tag. val element = formBuilder . getElementAtIndex ( 2 ) val value : String = element ?. value as String Check if the form is valid \u00b6 Use this variable (method in Java) if you need to check whether the required elements of the form are completed. formBuilder . isValidForm // returns Boolean of whether the form is valid or not Clear all values \u00b6 Clear all values of the form elements by calling clearAll(). formBuilder . clearAll () Add Form Element \u00b6 Add one form element. Note that setItems() needs to be called afterward. formBuilder . addFormElement ( FormButtonElement ()) formBuilder . setItems () Add Form Elements \u00b6 Add multiple form elements. val elements : MutableList < BaseFormElement <*>> = mutableListOf () formBuilder . addFormElements ( elements ) Form Layouts \u00b6 Form Layouts override the default layouts used for all related form elements in the form. formBuilder = form ( recyclerView , formLayouts = FormLayouts ( text = R . layout . form_element_custom , textArea = R . layout . form_element_custom ))","title":"Form Build Helper"},{"location":"helper/#cache-form-elements","text":"By default, RecyclerView will cache 2 views. By setting cacheForm = true in the FormBuildHelper, all form elements will be cached instead of recycled. NOTE: This is enabled by default.","title":"Cache Form Elements"},{"location":"helper/#set-form-element-value-change-listener-to-get-changed-value-instantly","text":"While creating a new instance of FormBuildHelper, add a listener in the constructor. var formBuilder = FormBuildHelper ( object : OnFormElementValueChangedListener { override fun onValueChanged ( formElement : BaseFormElement <*>) { // do anything here with formElement.value } }, findViewById ( R . id . recyclerView ), cacheForm = true )","title":"Set form element value change listener to get changed value instantly"},{"location":"helper/#get-value-for-unique-form-elements","text":"Use the unique tag assigned earlier to retrieve value (See examples in this repo). val element = formBuilder . getFormElement < FormEmailEditTextElement >( Email . ordinal ) val value : String = element . value Use the added index of the element instead if you did not assign a tag. val element = formBuilder . getElementAtIndex ( 2 ) val value : String = element ?. value as String","title":"Get value for unique form elements"},{"location":"helper/#check-if-the-form-is-valid","text":"Use this variable (method in Java) if you need to check whether the required elements of the form are completed. formBuilder . isValidForm // returns Boolean of whether the form is valid or not","title":"Check if the form is valid"},{"location":"helper/#clear-all-values","text":"Clear all values of the form elements by calling clearAll(). formBuilder . clearAll ()","title":"Clear all values"},{"location":"helper/#add-form-element","text":"Add one form element. Note that setItems() needs to be called afterward. formBuilder . addFormElement ( FormButtonElement ()) formBuilder . setItems ()","title":"Add Form Element"},{"location":"helper/#add-form-elements","text":"Add multiple form elements. val elements : MutableList < BaseFormElement <*>> = mutableListOf () formBuilder . addFormElements ( elements )","title":"Add Form Elements"},{"location":"helper/#form-layouts","text":"Form Layouts override the default layouts used for all related form elements in the form. formBuilder = form ( recyclerView , formLayouts = FormLayouts ( text = R . layout . form_element_custom , textArea = R . layout . form_element_custom ))","title":"Form Layouts"},{"location":"migrateBuilder/","text":"Why remove the builders? \u00b6 Builders serves more of a purpose in the original FormMaster repository to quickly build form elements by chaining setters Setters in KFormMaster were kept to provide some compatibility with Java and limit the properties in the Kotlin Form DSL Compatibility with Java was fixed in a recent update by removing the original builder methods in the Form Element classes Now, the only purpose of the builder classes was to build form elements in the Form DSL The builder classes create too much redundancy in the code and cause issues with the Dex file that is created Migrate to Form Element Classes \u00b6 Remove builder imports Replace \".build()\" with \"\" Replace Builder Classes with Form Element Classes Builder Class Form Element Class HeaderBuilder FormHeader EmailEditTextBuilder FormEmailEditTextElement PasswordEditTextBuilder FormPasswordEditTextElement PhoneEditTextBuilder FormPhoneEditTextElement SingleLineEditTextBuilder FormSingleLineEditTextElement MultiLineEditTextBuilder FormMultiLineEditTextElement NumberEditTextBuilder FormNumberEditTextElement DateBuilder FormPickerDateElement TimeBuilder FormPickerTimeElement DateTimeBuilder FormPickerDateTimeElement DropDownBuilder FormPickerDropDownElement MultiCheckBoxBuilder FormPickerMultiCheckBoxElement AutoCompleteBuilder FormAutoCompleteElement AutoCompleteTokenBuilder FormTokenAutoCompleteElement TextViewBuilder FormTextViewElement LabelBuilder FormLabelElement SwitchBuilder FormSwitchElement SliderBuilder FormSliderElement CheckBoxBuilder FormCheckBoxElement SegmentedBuilder FormSegmentedElement ButtonBuilder FormButtonElement","title":"Migrate from Builders"},{"location":"migrateBuilder/#why-remove-the-builders","text":"Builders serves more of a purpose in the original FormMaster repository to quickly build form elements by chaining setters Setters in KFormMaster were kept to provide some compatibility with Java and limit the properties in the Kotlin Form DSL Compatibility with Java was fixed in a recent update by removing the original builder methods in the Form Element classes Now, the only purpose of the builder classes was to build form elements in the Form DSL The builder classes create too much redundancy in the code and cause issues with the Dex file that is created","title":"Why remove the builders?"},{"location":"migrateBuilder/#migrate-to-form-element-classes","text":"Remove builder imports Replace \".build()\" with \"\" Replace Builder Classes with Form Element Classes Builder Class Form Element Class HeaderBuilder FormHeader EmailEditTextBuilder FormEmailEditTextElement PasswordEditTextBuilder FormPasswordEditTextElement PhoneEditTextBuilder FormPhoneEditTextElement SingleLineEditTextBuilder FormSingleLineEditTextElement MultiLineEditTextBuilder FormMultiLineEditTextElement NumberEditTextBuilder FormNumberEditTextElement DateBuilder FormPickerDateElement TimeBuilder FormPickerTimeElement DateTimeBuilder FormPickerDateTimeElement DropDownBuilder FormPickerDropDownElement MultiCheckBoxBuilder FormPickerMultiCheckBoxElement AutoCompleteBuilder FormAutoCompleteElement AutoCompleteTokenBuilder FormTokenAutoCompleteElement TextViewBuilder FormTextViewElement LabelBuilder FormLabelElement SwitchBuilder FormSwitchElement SliderBuilder FormSliderElement CheckBoxBuilder FormCheckBoxElement SegmentedBuilder FormSegmentedElement ButtonBuilder FormButtonElement","title":"Migrate to Form Element Classes"},{"location":"about/contributing/","text":"Contributing \u00b6 Interested in contributing to KFormMaster? Want to report a bug? Before you do, please read the following guidelines. Submission context \u00b6 Got a question or problem? \u00b6 For quick questions there's no need to open an issue as you can reach us on gitter.im . Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines . Missing a feature? \u00b6 You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether it benefits the overall functionality of the library. Submission guidelines \u00b6 Submitting an issue \u00b6 Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue. Submitting a Pull Request (PR) \u00b6 Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project and make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, run a gradle build. This is a mandatory requirement for your PR to get accepted, as the library should at all times be installable through GitHub (Such as through https://jitpack.io/). Pull Request : Send a PR to KFormMaster:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Interested in contributing to KFormMaster? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"about/contributing/#submission-context","text":"","title":"Submission context"},{"location":"about/contributing/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on gitter.im .","title":"Got a question or problem?"},{"location":"about/contributing/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines .","title":"Found a bug?"},{"location":"about/contributing/#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether it benefits the overall functionality of the library.","title":"Missing a feature?"},{"location":"about/contributing/#submission-guidelines","text":"","title":"Submission guidelines"},{"location":"about/contributing/#submitting-an-issue","text":"Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue.","title":"Submitting an issue"},{"location":"about/contributing/#submitting-a-pull-request-pr","text":"Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project and make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, run a gradle build. This is a mandatory requirement for your PR to get accepted, as the library should at all times be installable through GitHub (Such as through https://jitpack.io/). Pull Request : Send a PR to KFormMaster:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Submitting a Pull Request (PR)"},{"location":"about/credits/","text":"adib2149/FormMaster is the original project this Kotlin port is based on shaymargolis/FormMaster is used for the generics support and addition of the AutoComplete form element vivchar/RendererRecyclerViewAdapter is used to support several types of cells splitwise/TokenAutoComplete is used for the AutoCompleteToken form element @area55git created the KFormMaster logo Icons8 created the icons used for the Segmented element example.","title":"Credits"},{"location":"about/license/","text":"Copyright 2020 Justin Kirk Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"custom/customize/","text":"Form accent color change \u00b6 If you want to change the colors, just override the colors in your colors.xml file: <color name= \"colorFormMasterHeaderBackground\" > #DDDDDD </color> <color name= \"colorFormMasterHeaderText\" > #000000 </color> <color name= \"colorFormMasterElementBackground\" > #FFFFFF </color> <color name= \"colorFormMasterElementTextTitle\" > #222222 </color> <color name= \"colorFormMasterElementErrorTitle\" > #FF0000 </color> <color name= \"colorFormMasterElementHint\" > #a8a8a8 </color> <color name= \"colorFormMasterElementTextValue\" > #000000 </color> <color name= \"colorFormMasterElementTextView\" > #757575 </color> <color name= \"colorFormMasterElementButtonText\" > #42A5F5 </color> <color name= \"colorFormMasterElementFocusedTitle\" > #0277bd </color> <color name= \"colorFormMasterElementTextDisabled\" > #757575 </color> <color name= \"colorFormMasterDivider\" > #DDDDDD </color> <color name= \"colorFormMasterElementToken\" > #f5f5f5 </color> <color name= \"colorFormMasterElementRadioSelected\" > #42A5F5 </color> <color name= \"colorFormMasterElementRadioUnSelected\" > #FFFFFF </color> Form UI change \u00b6 If you want to change how the forms look, just override a form_element XML in your project. Just make sure to keep the ID name the same as it is in the library for the components. android : id = \"@+id/formElementTitle\" android : id = \"@+id/formElementValue\" ...","title":"Customize Form"},{"location":"custom/customize/#form-accent-color-change","text":"If you want to change the colors, just override the colors in your colors.xml file: <color name= \"colorFormMasterHeaderBackground\" > #DDDDDD </color> <color name= \"colorFormMasterHeaderText\" > #000000 </color> <color name= \"colorFormMasterElementBackground\" > #FFFFFF </color> <color name= \"colorFormMasterElementTextTitle\" > #222222 </color> <color name= \"colorFormMasterElementErrorTitle\" > #FF0000 </color> <color name= \"colorFormMasterElementHint\" > #a8a8a8 </color> <color name= \"colorFormMasterElementTextValue\" > #000000 </color> <color name= \"colorFormMasterElementTextView\" > #757575 </color> <color name= \"colorFormMasterElementButtonText\" > #42A5F5 </color> <color name= \"colorFormMasterElementFocusedTitle\" > #0277bd </color> <color name= \"colorFormMasterElementTextDisabled\" > #757575 </color> <color name= \"colorFormMasterDivider\" > #DDDDDD </color> <color name= \"colorFormMasterElementToken\" > #f5f5f5 </color> <color name= \"colorFormMasterElementRadioSelected\" > #42A5F5 </color> <color name= \"colorFormMasterElementRadioUnSelected\" > #FFFFFF </color>","title":"Form accent color change"},{"location":"custom/customize/#form-ui-change","text":"If you want to change how the forms look, just override a form_element XML in your project. Just make sure to keep the ID name the same as it is in the library for the components. android : id = \"@+id/formElementTitle\" android : id = \"@+id/formElementValue\" ...","title":"Form UI change"},{"location":"custom/element/","text":"It's possible to create your own form element. Here is what is needed. Form Element Layout \u00b6 Create a new XML layout file. We'll name it form_element_custom.xml. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:background= \"@color/colorFormMasterElementBackground\" android:orientation= \"vertical\" android:paddingBottom= \"16dp\" > <View android:id= \"@+id/formElementDivider\" android:layout_width= \"match_parent\" android:layout_height= \"0.5dp\" android:layout_marginLeft= \"16dp\" android:layout_marginRight= \"16dp\" android:background= \"@color/colorFormMasterDivider\" /> <LinearLayout android:id= \"@+id/formElementMainLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_marginLeft= \"16dp\" android:layout_marginRight= \"16dp\" android:layout_marginTop= \"16dp\" android:orientation= \"horizontal\" > <com.thejuki.kformmaster.widget.IconTextView android:id= \"@+id/formElementTitle\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_weight= \"2\" android:textColor= \"@color/colorFormMasterElementTextTitle\" android:textSize= \"@dimen/elementTextTitleSize\" tools:text= \"Custom Title\" /> <com.thejuki.kformmaster.widget.ClearableEditText android:id= \"@+id/formElementValue\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_weight= \"3\" android:background= \"@null\" android:gravity= \"end\" android:imeOptions= \"actionNext\" android:inputType= \"textNoSuggestions\" android:maxLines= \"1\" android:textColor= \"@drawable/edit_text_selector\" android:textColorHint= \"@color/colorFormMasterElementHint\" android:textSize= \"@dimen/elementTextValueSize\" tools:text= \"Custom Value\" /> </LinearLayout> <androidx.appcompat.widget.AppCompatTextView android:id= \"@+id/formElementError\" android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_marginLeft= \"16dp\" android:layout_marginRight= \"16dp\" android:layout_marginTop= \"10dp\" android:layout_weight= \"1\" android:textColor= \"@color/colorFormMasterElementErrorTitle\" android:textSize= \"@dimen/elementErrorTitleSize\" android:visibility= \"gone\" tools:text= \"Personal Info\" /> </LinearLayout> Form Element Model \u00b6 Note that a new model does not need to contain a body if BaseFormElement provides everything you need. class FormCustomElement ( tag : Int = - 1 ) : BaseFormElement < String >( tag ) Optional: Form Builder Extension \u00b6 Create a FormBuildHelper DSL method for your custom form model. /** FormBuildHelper extension to add a CustomElement */ fun FormBuildHelper . customEx ( tag : Int = - 1 , init : FormCustomElement .() -> Unit ): FormCustomElement { return addFormElement ( FormCustomElement ( tag ). apply ( init )) } Form Element View Binder \u00b6 Create a view binder for your custom form element. ViewRenderer layoutID parameter - Form element layout name type parameter - Form element model class (ModelName::class.java) binder parameter: model is a form element instance model finder can find views or set fields of a view using its ID payloads can be replaced with \"_\" as it is not used viewStateProvider parameter - Form element view state provider class CustomViewRenderer ( private val formBuilder : FormBuildHelper , @LayoutRes private val layoutID : Int ?) : BaseFormViewRenderer () { val viewRenderer = ViewRenderer ( layoutID ?: R . layout . form_element_custom , FormCustomElement :: class . java ) { model , finder : FormViewFinder , _ -> val textViewTitle = finder . find ( R . id . formElementTitle ) as AppCompatTextView val mainViewLayout = finder . find ( R . id . formElementMainLayout ) as ? LinearLayout val textViewError = finder . find ( R . id . formElementError ) as AppCompatTextView val dividerView = finder . find ( R . id . formElementDivider ) as ? View val itemView = finder . getRootView () as View val editTextValue = finder . find ( R . id . formElementValue ) as com . thejuki . kformmaster . widget . ClearableEditText baseSetup ( model , dividerView , textViewTitle , textViewError , itemView , mainViewLayout , editTextValue ) editTextValue . setText ( model . valueAsString ) editTextValue . hint = model . hint ?: \"\" // Initially use 4 lines // unless a different number was provided if ( model . maxLines == 1 ) { model . maxLines = 4 } // If an InputType is provided, use it instead model . inputType ?. let { editTextValue . setRawInputType ( it ) } // If imeOptions are provided, use them instead of creating a new line model . imeOptions ?. let { editTextValue . imeOptions = it } setEditTextFocusEnabled ( editTextValue , itemView ) setOnFocusChangeListener ( context , model , formBuilder ) addTextChangedListener ( model , formBuilder ) setOnEditorActionListener ( model , formBuilder ) } private fun setEditTextFocusEnabled ( editTextValue : AppCompatEditText , itemView : View ) { itemView . setOnClickListener { editTextValue . requestFocus () val imm = itemView . context . getSystemService ( Context . INPUT_METHOD_SERVICE ) as InputMethodManager editTextValue . setSelection ( editTextValue . text ?. length ?: 0 ) imm . showSoftInput ( editTextValue , InputMethodManager . SHOW_IMPLICIT ) } } } Use your Custom Form Element \u00b6 Create a form activity for your custom form element. IMPORTANT Register your custom view binder or you will get a RuntimeException RuntimeException: ViewRenderer not registered for this type class CustomFormActivity : AppCompatActivity () { private lateinit var binding : ActivityFormBinding // Setup the FormBuildHelper at the class level if necessary private lateinit var formBuilder : FormBuildHelper override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) binding = ActivityFormBinding . inflate ( layoutInflater ) val view = binding . root setContentView ( view ) setupForm () } private enum class Tag { Custom } private fun setupForm () { formBuilder = form ( binding . recyclerView ) { customEx ( Tag . Custom . ordinal ) { title = getString ( R . string . Custom ) } } // Required formBuilder . registerCustomViewRenderer ( CustomViewRenderer ( formBuilder ). viewRenderer ) } }","title":"Custom Element"},{"location":"custom/element/#form-element-layout","text":"Create a new XML layout file. We'll name it form_element_custom.xml. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:background= \"@color/colorFormMasterElementBackground\" android:orientation= \"vertical\" android:paddingBottom= \"16dp\" > <View android:id= \"@+id/formElementDivider\" android:layout_width= \"match_parent\" android:layout_height= \"0.5dp\" android:layout_marginLeft= \"16dp\" android:layout_marginRight= \"16dp\" android:background= \"@color/colorFormMasterDivider\" /> <LinearLayout android:id= \"@+id/formElementMainLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_marginLeft= \"16dp\" android:layout_marginRight= \"16dp\" android:layout_marginTop= \"16dp\" android:orientation= \"horizontal\" > <com.thejuki.kformmaster.widget.IconTextView android:id= \"@+id/formElementTitle\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_weight= \"2\" android:textColor= \"@color/colorFormMasterElementTextTitle\" android:textSize= \"@dimen/elementTextTitleSize\" tools:text= \"Custom Title\" /> <com.thejuki.kformmaster.widget.ClearableEditText android:id= \"@+id/formElementValue\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_weight= \"3\" android:background= \"@null\" android:gravity= \"end\" android:imeOptions= \"actionNext\" android:inputType= \"textNoSuggestions\" android:maxLines= \"1\" android:textColor= \"@drawable/edit_text_selector\" android:textColorHint= \"@color/colorFormMasterElementHint\" android:textSize= \"@dimen/elementTextValueSize\" tools:text= \"Custom Value\" /> </LinearLayout> <androidx.appcompat.widget.AppCompatTextView android:id= \"@+id/formElementError\" android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_marginLeft= \"16dp\" android:layout_marginRight= \"16dp\" android:layout_marginTop= \"10dp\" android:layout_weight= \"1\" android:textColor= \"@color/colorFormMasterElementErrorTitle\" android:textSize= \"@dimen/elementErrorTitleSize\" android:visibility= \"gone\" tools:text= \"Personal Info\" /> </LinearLayout>","title":"Form Element Layout"},{"location":"custom/element/#form-element-model","text":"Note that a new model does not need to contain a body if BaseFormElement provides everything you need. class FormCustomElement ( tag : Int = - 1 ) : BaseFormElement < String >( tag )","title":"Form Element Model"},{"location":"custom/element/#optional-form-builder-extension","text":"Create a FormBuildHelper DSL method for your custom form model. /** FormBuildHelper extension to add a CustomElement */ fun FormBuildHelper . customEx ( tag : Int = - 1 , init : FormCustomElement .() -> Unit ): FormCustomElement { return addFormElement ( FormCustomElement ( tag ). apply ( init )) }","title":"Optional: Form Builder Extension"},{"location":"custom/element/#form-element-view-binder","text":"Create a view binder for your custom form element. ViewRenderer layoutID parameter - Form element layout name type parameter - Form element model class (ModelName::class.java) binder parameter: model is a form element instance model finder can find views or set fields of a view using its ID payloads can be replaced with \"_\" as it is not used viewStateProvider parameter - Form element view state provider class CustomViewRenderer ( private val formBuilder : FormBuildHelper , @LayoutRes private val layoutID : Int ?) : BaseFormViewRenderer () { val viewRenderer = ViewRenderer ( layoutID ?: R . layout . form_element_custom , FormCustomElement :: class . java ) { model , finder : FormViewFinder , _ -> val textViewTitle = finder . find ( R . id . formElementTitle ) as AppCompatTextView val mainViewLayout = finder . find ( R . id . formElementMainLayout ) as ? LinearLayout val textViewError = finder . find ( R . id . formElementError ) as AppCompatTextView val dividerView = finder . find ( R . id . formElementDivider ) as ? View val itemView = finder . getRootView () as View val editTextValue = finder . find ( R . id . formElementValue ) as com . thejuki . kformmaster . widget . ClearableEditText baseSetup ( model , dividerView , textViewTitle , textViewError , itemView , mainViewLayout , editTextValue ) editTextValue . setText ( model . valueAsString ) editTextValue . hint = model . hint ?: \"\" // Initially use 4 lines // unless a different number was provided if ( model . maxLines == 1 ) { model . maxLines = 4 } // If an InputType is provided, use it instead model . inputType ?. let { editTextValue . setRawInputType ( it ) } // If imeOptions are provided, use them instead of creating a new line model . imeOptions ?. let { editTextValue . imeOptions = it } setEditTextFocusEnabled ( editTextValue , itemView ) setOnFocusChangeListener ( context , model , formBuilder ) addTextChangedListener ( model , formBuilder ) setOnEditorActionListener ( model , formBuilder ) } private fun setEditTextFocusEnabled ( editTextValue : AppCompatEditText , itemView : View ) { itemView . setOnClickListener { editTextValue . requestFocus () val imm = itemView . context . getSystemService ( Context . INPUT_METHOD_SERVICE ) as InputMethodManager editTextValue . setSelection ( editTextValue . text ?. length ?: 0 ) imm . showSoftInput ( editTextValue , InputMethodManager . SHOW_IMPLICIT ) } } }","title":"Form Element View Binder"},{"location":"custom/element/#use-your-custom-form-element","text":"Create a form activity for your custom form element. IMPORTANT Register your custom view binder or you will get a RuntimeException RuntimeException: ViewRenderer not registered for this type class CustomFormActivity : AppCompatActivity () { private lateinit var binding : ActivityFormBinding // Setup the FormBuildHelper at the class level if necessary private lateinit var formBuilder : FormBuildHelper override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) binding = ActivityFormBinding . inflate ( layoutInflater ) val view = binding . root setContentView ( view ) setupForm () } private enum class Tag { Custom } private fun setupForm () { formBuilder = form ( binding . recyclerView ) { customEx ( Tag . Custom . ordinal ) { title = getString ( R . string . Custom ) } } // Required formBuilder . registerCustomViewRenderer ( CustomViewRenderer ( formBuilder ). viewRenderer ) } }","title":"Use your Custom Form Element"},{"location":"custom/formLayouts/","text":"Form Layouts override the default layouts used for all related form elements in the form. Example \u00b6 Kotlin \u00b6 formBuilder = form ( binding . recyclerView , formLayouts = FormLayouts ( text = R . layout . form_element_custom , textArea = R . layout . form_element_custom )) { } Java \u00b6 FormLayouts formLayouts = new FormLayouts (); formLayouts . setText ( R . layout . form_element_custom ); formLayouts . setTextArea ( R . layout . form_element_custom ); formBuilder = new FormBuildHelper ( this , this , findViewById ( R . id . recyclerView ), true , formLayouts );","title":"Form Layouts"},{"location":"custom/formLayouts/#example","text":"","title":"Example"},{"location":"custom/formLayouts/#kotlin","text":"formBuilder = form ( binding . recyclerView , formLayouts = FormLayouts ( text = R . layout . form_element_custom , textArea = R . layout . form_element_custom )) { }","title":"Kotlin"},{"location":"custom/formLayouts/#java","text":"FormLayouts formLayouts = new FormLayouts (); formLayouts . setText ( R . layout . form_element_custom ); formLayouts . setTextArea ( R . layout . form_element_custom ); formBuilder = new FormBuildHelper ( this , this , findViewById ( R . id . recyclerView ), true , formLayouts );","title":"Java"},{"location":"custom/placeAutocomplete/","text":"The autocomplete service in the Places SDK for Android returns place predictions in response to user search queries. As the user types, the autocomplete service returns suggestions for places such as businesses, addresses and points of interest. Place Autocomplete Reference Note This element is not included with the other form elements because it relies on the Places library, requires an API key, and relies on onActivityResult to get the selected Place object. This element behaves as just an on click event to display the Places Autocomplete activity. The selected Place will be displayed in the form element text field using the PlaceItem class's toString method. To use this custom form element in the app folder you will need to do following: Get an API Key Add the Places SDK dependency to your app's build.gradle file (Use the latest version) implementation 'com.google.android.libraries.places:places:1.0.0' Copy the following files to your app project: /app/src/main/java/com/thejuki/kformmasterexample/item/PlaceItem.kt /app/src/main/java/com/thejuki/kformmasterexample/custom/model/FormPlacesAutoCompleteElement.kt /app/src/main/java/com/thejuki/kformmasterexample/custom/view/FormPlacesAutoCompleteViewRenderer.kt /app/src/main/java/com/thejuki/kformmasterexample/custom/helper/FormBuilderExtensions.kt Use the Places Autocomplete Form Element \u00b6 IMPORTANT Register your custom view binder or you will get a RuntimeException RuntimeException: ViewRenderer not registered for this type Override onActivityResult and have the form element call handleActivityResult(formBuilder, resultCode, data) class CustomFormActivity : AppCompatActivity () { // Setup the FormBuildHelper at the class level private lateinit var formBuilder : FormBuildHelper override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_form ) setupForm () // Setup Places for custom placesAutoComplete element // NOTE: Use your API Key Places . initialize ( applicationContext , \"[APP_KEY]\" ) } private enum class Tag { PlacesElement } private fun setupForm () { formBuilder = form ( recyclerView ) { placesAutoComplete ( Tag . PlacesElement . ordinal ) { title = getString ( R . string . Places_AutoComplete ) // Set a value initially to show in the textfield value = PlaceItem ( name = \"A place name\" ) hint = \"Tap to show auto complete\" // Set place fields to return back from the selected place placeFields = listOf ( Place . Field . ID , Place . Field . NAME , Place . Field . ADDRESS ) /** * Display auto complete in an overlay or fullscreen * * OVERLAY (Default) * FULLSCREEN */ autocompleteActivityMode = AutocompleteActivityMode . OVERLAY clearable = true } } // Required // IMPORTANT: Pass in 'this' for the fragment parameter so that startActivityForResult is called from the fragment (If you are using a fragment instead of an activity) formBuilder . registerCustomViewRenderer ( FormPlacesAutoCompleteViewRenderer ( formBuilder , layoutID = null , fragment = null ). viewRenderer ) } /** * Override the activity's onActivityResult(), check the request code, and * let the FormPlacesAutoCompleteElement handle the result */ override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ?) { if ( requestCode == Tag . PlacesElement . ordinal ) { val placesElement = formBuilder . getFormElement < FormPlacesAutoCompleteElement >( Tag . PlacesElement . ordinal ) placesElement . handleActivityResult ( formBuilder , resultCode , data ) } } }","title":"Google Place Autocomplete"},{"location":"custom/placeAutocomplete/#use-the-places-autocomplete-form-element","text":"IMPORTANT Register your custom view binder or you will get a RuntimeException RuntimeException: ViewRenderer not registered for this type Override onActivityResult and have the form element call handleActivityResult(formBuilder, resultCode, data) class CustomFormActivity : AppCompatActivity () { // Setup the FormBuildHelper at the class level private lateinit var formBuilder : FormBuildHelper override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_form ) setupForm () // Setup Places for custom placesAutoComplete element // NOTE: Use your API Key Places . initialize ( applicationContext , \"[APP_KEY]\" ) } private enum class Tag { PlacesElement } private fun setupForm () { formBuilder = form ( recyclerView ) { placesAutoComplete ( Tag . PlacesElement . ordinal ) { title = getString ( R . string . Places_AutoComplete ) // Set a value initially to show in the textfield value = PlaceItem ( name = \"A place name\" ) hint = \"Tap to show auto complete\" // Set place fields to return back from the selected place placeFields = listOf ( Place . Field . ID , Place . Field . NAME , Place . Field . ADDRESS ) /** * Display auto complete in an overlay or fullscreen * * OVERLAY (Default) * FULLSCREEN */ autocompleteActivityMode = AutocompleteActivityMode . OVERLAY clearable = true } } // Required // IMPORTANT: Pass in 'this' for the fragment parameter so that startActivityForResult is called from the fragment (If you are using a fragment instead of an activity) formBuilder . registerCustomViewRenderer ( FormPlacesAutoCompleteViewRenderer ( formBuilder , layoutID = null , fragment = null ). viewRenderer ) } /** * Override the activity's onActivityResult(), check the request code, and * let the FormPlacesAutoCompleteElement handle the result */ override fun onActivityResult ( requestCode : Int , resultCode : Int , data : Intent ?) { if ( requestCode == Tag . PlacesElement . ordinal ) { val placesElement = formBuilder . getFormElement < FormPlacesAutoCompleteElement >( Tag . PlacesElement . ordinal ) placesElement . handleActivityResult ( formBuilder , resultCode , data ) } } }","title":"Use the Places Autocomplete Form Element"},{"location":"element/autoComplete/","text":"The AutoComplete form element is used for an AutoComplete row. Array Adapter \u00b6 Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call. NOTICE The ContactItem and ContactAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown. autoComplete < ContactItem >( 1 ) { arrayAdapter = ContactAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) } Dropdown Width \u00b6 This is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width. autoComplete < ContactItem >( 1 ) { dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT } Example \u00b6 Kotlin \u00b6 autoComplete < ContactItem >( 1 ) { arrayAdapter = ContactAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 , defaultItems = arrayListOf ( ContactItem ( id = 1 , value = \"\" , label = \"Try \\\"Apple May\\\"\" ))) dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT value = ContactItem ( id = 1 , value = \"John Smith\" , label = \"John Smith (Tester)\" ) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormAutoCompleteElement < ContactItem > autoComplete = new FormAutoCompleteElement <> ( 1 ); autoComplete . setArrayAdapter ( new ContactAutoCompleteAdapter ( this , android . R . layout . simple_list_item_1 , new ArrayList <> ( Collections . singletonList ( new ContactItem ( 1L , \"\" , \"Try \\\"Apple May\\\"\" ))))); autoComplete . setDropdownWidth ( ViewGroup . LayoutParams . MATCH_PARENT ); autoComplete . setValue ( new ContactItem ( 1L , \"John Smith\" , \"John Smith (Tester)\" )); elements . add ( autoComplete );","title":"AutoComplete"},{"location":"element/autoComplete/#array-adapter","text":"Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call. NOTICE The ContactItem and ContactAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown. autoComplete < ContactItem >( 1 ) { arrayAdapter = ContactAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) }","title":"Array Adapter"},{"location":"element/autoComplete/#dropdown-width","text":"This is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width. autoComplete < ContactItem >( 1 ) { dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT }","title":"Dropdown Width"},{"location":"element/autoComplete/#example","text":"","title":"Example"},{"location":"element/autoComplete/#kotlin","text":"autoComplete < ContactItem >( 1 ) { arrayAdapter = ContactAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 , defaultItems = arrayListOf ( ContactItem ( id = 1 , value = \"\" , label = \"Try \\\"Apple May\\\"\" ))) dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT value = ContactItem ( id = 1 , value = \"John Smith\" , label = \"John Smith (Tester)\" ) }","title":"Kotlin"},{"location":"element/autoComplete/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormAutoCompleteElement < ContactItem > autoComplete = new FormAutoCompleteElement <> ( 1 ); autoComplete . setArrayAdapter ( new ContactAutoCompleteAdapter ( this , android . R . layout . simple_list_item_1 , new ArrayList <> ( Collections . singletonList ( new ContactItem ( 1L , \"\" , \"Try \\\"Apple May\\\"\" ))))); autoComplete . setDropdownWidth ( ViewGroup . LayoutParams . MATCH_PARENT ); autoComplete . setValue ( new ContactItem ( 1L , \"John Smith\" , \"John Smith (Tester)\" )); elements . add ( autoComplete );","title":"Java"},{"location":"element/autoCompleteToken/","text":"The AutoCompleteToken form element is used for an AutoComplete row with multiple values represented as tokens. Array Adapter \u00b6 Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call. NOTICE The ContactItem and EmailAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown. autoCompleteToken < List < ContactItem >>( 1 ) { arrayAdapter = EmailAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) } Dropdown Width \u00b6 This is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width. autoCompleteToken < List < ContactItem >>( 1 ) { dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT } Example \u00b6 Kotlin \u00b6 autoCompleteToken < List < ContactItem >>( 1 ) { arrayAdapter = EmailAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT value = arrayListOf ( ContactItem ( id = 1 , value = \"John.Smith@mail.com\" , label = \"John Smith (Tester)\" )) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormTokenAutoCompleteElement < List < ContactItem >> autoCompleteToken = new FormTokenAutoCompleteElement <> ( 1 ); autoCompleteToken . setArrayAdapter ( new EmailAutoCompleteAdapter ( this , android . R . layout . simple_list_item_1 )); autoCompleteToken . setDropdownWidth ( ViewGroup . LayoutParams . MATCH_PARENT ); elements . add ( autoCompleteToken );","title":"AutoCompleteToken"},{"location":"element/autoCompleteToken/#array-adapter","text":"Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call. NOTICE The ContactItem and EmailAutoCompleteAdapter classes are provided in the example app. Your custom class just needs to override toString() to display in the dropdown. autoCompleteToken < List < ContactItem >>( 1 ) { arrayAdapter = EmailAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) }","title":"Array Adapter"},{"location":"element/autoCompleteToken/#dropdown-width","text":"This is the width of the dropdown list. ViewGroup.LayoutParams.MATCH_PARENT will use the form's width. autoCompleteToken < List < ContactItem >>( 1 ) { dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT }","title":"Dropdown Width"},{"location":"element/autoCompleteToken/#example","text":"","title":"Example"},{"location":"element/autoCompleteToken/#kotlin","text":"autoCompleteToken < List < ContactItem >>( 1 ) { arrayAdapter = EmailAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) dropdownWidth = ViewGroup . LayoutParams . MATCH_PARENT value = arrayListOf ( ContactItem ( id = 1 , value = \"John.Smith@mail.com\" , label = \"John Smith (Tester)\" )) }","title":"Kotlin"},{"location":"element/autoCompleteToken/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormTokenAutoCompleteElement < List < ContactItem >> autoCompleteToken = new FormTokenAutoCompleteElement <> ( 1 ); autoCompleteToken . setArrayAdapter ( new EmailAutoCompleteAdapter ( this , android . R . layout . simple_list_item_1 )); autoCompleteToken . setDropdownWidth ( ViewGroup . LayoutParams . MATCH_PARENT ); elements . add ( autoCompleteToken );","title":"Java"},{"location":"element/base/","text":"Common values used by multiple form elements are stored in the base form element model such as tag, title, and value. Base Value Requirements None of the base values are required but providing a title is advised. Editable fields that require a keyboard change the form element value when they lose focus. Because of this, before validating or submitting a form, clear the focus of the form using currentFocus?.clearFocus() in your activity. Setting Colors Setting the form element colors requires a Color Int R.color.name is a Color Res and you must get the Color Int using ResourcesCompat.getColor() or similar Examples: Color.WHITE Color.parseColor(\"#FF4081\") ResourcesCompat.getColor(resources, R.color.name, null) Tag \u00b6 The tag is an integer used to easily get a form element later. You can also retrieve a form element by the index it was inserted into the form elements list. text ( 1 ) { } email ( Tag . Email . ordinal ) { } val textElement = formBuilder . getElementAtIndex ( 0 ) as FormSingleLineEditTextElement val emailElement = formBuilder . getFormElement < FormEmailEditTextElement >( Tag . Email . ordinal ) Title \u00b6 The title is the text displayed next to the value of the form element. text { title = getString ( R . string . title ) } Value \u00b6 The value is the value of the form element. Depending on the form element, this can be a String, Date, or an object of your choice. text { value = \"Hello World\" } autoComplete < ContactItem > { value = ContactItem ( id = 1 , value = \"John Smith\" ) } Value Observers \u00b6 The list of value observers are fired when the form element value changes. When a value changes, the Unit passes in the new value and form element. text { value = \"Hello World\" valueObservers . add ({ newValue , element -> Toast . makeText ( this @FormActivity , newValue , LENGTH_SHORT ). show () }) } On Click Unit \u00b6 This unit is invoked when the form element is clicked. NOTE: The click event is not fired when a text field is clicked on to focus. Use onFocus to get the event when a field has focus. text { onClick = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } } On Focus Unit \u00b6 This unit is invoked when the form element is focused. text { onFocus = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } } On Touch Up Unit \u00b6 This unit is invoked when the form element is touched up. text { onTouchUp = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } } On Touch Down Unit \u00b6 This unit is invoked when the form element is touched down. text { onTouchDown = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } } On Title Icon Click Unit \u00b6 This unit is invoked when the title's icon is clicked. text { onTitleIconClick = { Toast . makeText ( this @FormActivity , \"Icon clicked\" , LENGTH_SHORT ). show () } } Options \u00b6 The list of options is used in form elements such as the Form Picker Dropdown Element and Form Picker MultiCheckBox Element. private val fruits = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" ), ListItem ( id = 3 , name = \"Mango\" ), ListItem ( id = 4 , name = \"Guava\" ), ListItem ( id = 5 , name = \"Apple\" ) ) dropDown < ListItem > { options = fruits value = ListItem ( id = 1 , name = \"Banana\" ) } multiCheckBox < List < ListItem >> { options = fruits value = listOf ( ListItem ( id = 1 , name = \"Banana\" )) } Update On Focus Change \u00b6 By default this is false. An EditText will update the form value as characters are typed. Setting this to true will only update the value when focus is lost or if Done is tapped on the keyboard. (See IME Options) text { updateOnFocusChange = true } Input Type \u00b6 By default this is set by the form element type. Setting this will override the EditText form element's Input Type. text { inputType = InputType . TYPE_CLASS_TEXT or InputType . TYPE_TEXT_FLAG_NO_SUGGESTIONS } IME Options \u00b6 By default this is EditorInfo.IME_ACTION_NEXT. Setting this will override the EditText form element's IME Options. If EditorInfo.IME_ACTION_DONE is used, tapping Done on the keyboard will update the form element value. text { imeOptions = EditorInfo . IME_ACTION_DONE } Input Mask Options \u00b6 By default edit text fields will not have any input mask format. Setting an input mask format will format the text field for the set value and as you type. phone { inputMaskOptions = InputMaskOptions ( primaryFormat = \"+1 ([000]) [000]-[0000]\" ) } Hint \u00b6 The hint is the hint (or placeholder) of the value field. text { hint = \"Enter a name\" } Max Length \u00b6 By default this is null which means that there is no max text length. Max length represents the number of characters the value field will allow. Unsupported Fields AutoComplete AutoCompleteToken text { maxLength = 10 } Max Lines \u00b6 By default this is 1. TextArea defaults to 4. Max lines represents the number of lines the value field will display. Unsupported Fields Password Number Text (Use TextArea instead) textArea { maxLines = 3 } Edit View Gravity \u00b6 By default, this is Gravity.END (Right to left). This determines the gravity of the text in the value field, button, or header. text { editViewGravity = Gravity . START } Edit View Paint Flags \u00b6 By default, this is null (No flags). This determines the extra paint flags for the edit view. text { editViewPaintFlags = Paint . UNDERLINE_TEXT_FLAG } Error \u00b6 This is the error text displayed in red below the form element. text { error = \"That's an error\" } Required \u00b6 By default this is false. Setting required to true will cause FormBuildHelper.isValidForm to return false if a value is not set. text { required = true } Clearable \u00b6 By default this is false. Setting this to true will display a clear button (X) to set the value to null. Unsupported Fields AutoComplete AutoCompleteToken text { clearable = true } Title Icon \u00b6 By default this is null. Setting this will set and display the title icon drawable (null will hide the icon). Button Setting this for the button form element will add the icon to the button. text { titleIcon = ContextCompat . getDrawable ( this @FormActivity , R . drawable . ic_email_blue_24dp ) } Title Icon Location \u00b6 By default this is IconTextView.Location.LEFT. Setting this set the title icon location (LEFT or RIGHT of the title). text { titleIconLocation = IconTextView . Location . RIGHT } Title Icon Padding \u00b6 By default this is 20. Setting this set the padding between the title text and icon. text { titleIconPadding = 25 } Clear On Focus \u00b6 By default this is false. Setting this to true will clear the text value of the form element when focused. Unsupported Fields AutoComplete AutoCompleteToken text { clearOnFocus = true } Visible \u00b6 By default this is true. Setting visible to false will hide the form element. text { visible = false } Enabled \u00b6 By default this is true. Setting enabled to false will disable the form element. This means that the click event will not fire when tapped, the text will be grayed out, and the value cannot be edited. Text View Use the TextView element if you just want a simple uneditable text element. text { enabled = false } Clickable \u00b6 By default this is true. Setting clickable to false will disable click events. Use focusable Click events will still be fired unless focusable is also set to false. text { clickable = false } Focusable \u00b6 By default this is true. Setting focusable to false will prevent a field from being focused. Focusable elements This value does not change the behavior of the form elements that cannot be focused. text { focusable = false } Display Divider \u00b6 By default this is true. Setting displayDivider to false will hide the divider line displayed before the element. text { displayDivider = true } Display Title \u00b6 By default this is true. Setting displayTitle to false will hide the title. text { displayTitle = true } Layout Padding Bottom (DP) \u00b6 By default, this will use android:paddingBottom in the XML. Setting layoutPaddingBottom will override the bottom padding of the form element. text { layoutPaddingBottom = 0 } Title Padding (DP) \u00b6 Setting padding will override the padding of the form element title view. FormElementPadding FormElementPadding is a simple class to set all padding. text { titlePadding = FormElementPadding ( /* Left */ 16 , /* Top */ 16 , /* Right */ 16 , /* Bottom */ 0 ) } Padding (DP) \u00b6 Setting padding will override the padding of the form element edit view. FormElementPadding FormElementPadding is a simple class to set all padding. text { padding = FormElementPadding ( /* Left */ 16 , /* Top */ 16 , /* Right */ 16 , /* Bottom */ 0 ) } Margins (DP) \u00b6 By default, this will use layout_margin values in the XML. Setting margins will override the margins of the form element. FormElementMargins FormElementMargins is a simple class to set all margins. text { margins = FormElementMargins ( /* Left */ 16 , /* Top */ 16 , /* Right */ 16 , /* Bottom */ 0 ) } Confirm Edit \u00b6 By default this is false. Setting confirmEdit to true will display an alert dialog confirming if the user wishes to edit the value if a current value exists. Currently, this only applies to the picker elements that display a dialog. date { confirmEdit = true } Confirm Title \u00b6 By default this is \"Confirm Edit\". Setting this will override the confirm edit dialog title. date { confirmTitle = \"Really edit this?\" } Confirm Message \u00b6 By default this is \"Edit this value?\". Setting this will override the confirm edit dialog message. date { confirmMessage = \"Are you ABSOLUTELY sure?\" } Background Color \u00b6 By default this is the value of R.Color.colorFormMasterElementBackground. Setting this will override the background color. text { backgroundColor = Color . WHITE } Title Text Color \u00b6 By default this is the value of R.Color.colorFormMasterElementTextTitle. Setting this will override the title text color. text { titleTextColor = Color . BLACK } Title Focused Text Color \u00b6 By default this is the value of R.Color.colorFormMasterElementFocusedTitle. Setting this will override the title text (when focused) color. text { titleFocusedTextColor = Color . BLACK } Value Text Color \u00b6 By default this is the value of R.Color.colorFormMasterElementTextValue. Setting this will override the value text color. text { valueTextColor = Color . BLACK } Error Text Color \u00b6 By default this is the value of R.Color.colorFormMasterElementErrorTitle. Setting this will override the error text color. text { errorTextColor = Color . BLACK } Hint Text Color \u00b6 By default this is the value of R.Color.colorFormMasterElementHint. Setting this will override the hint text color. text { hintTextColor = Color . BLACK } Clear value \u00b6 Clear the value of the element. element . clear () Is the value valid? \u00b6 isValid contains a getter that checks if the element is valid. At the base level, this checks if the value is not null or empty. This is used by formBuilder.isValidForm. element . isValid Custom Validation \u00b6 To add custom validation check, assign a lambda to validityCheck. text { validityCheck = { value ?. matches ( \"some regex\" . toRegex ()) == true } } Display New Value \u00b6 This function is called when the value changes to display the new value specific to the form element. By default, this handles setting the text of the AppCompatEditText view. element . displayNewValue () Dynamic Views \u00b6 NOTICE The Item View, Title View, Edit View, and Error View are accessible from the model to support changing variables such as the title, value, visibility, and error. However, try not to use the views directly. Let the variable setters do the work for you. Also, the views cannot be modified during the creation of the form elements as they are initialized during the render of the RecyclerView.","title":"Base"},{"location":"element/base/#tag","text":"The tag is an integer used to easily get a form element later. You can also retrieve a form element by the index it was inserted into the form elements list. text ( 1 ) { } email ( Tag . Email . ordinal ) { } val textElement = formBuilder . getElementAtIndex ( 0 ) as FormSingleLineEditTextElement val emailElement = formBuilder . getFormElement < FormEmailEditTextElement >( Tag . Email . ordinal )","title":"Tag"},{"location":"element/base/#title","text":"The title is the text displayed next to the value of the form element. text { title = getString ( R . string . title ) }","title":"Title"},{"location":"element/base/#value","text":"The value is the value of the form element. Depending on the form element, this can be a String, Date, or an object of your choice. text { value = \"Hello World\" } autoComplete < ContactItem > { value = ContactItem ( id = 1 , value = \"John Smith\" ) }","title":"Value"},{"location":"element/base/#value-observers","text":"The list of value observers are fired when the form element value changes. When a value changes, the Unit passes in the new value and form element. text { value = \"Hello World\" valueObservers . add ({ newValue , element -> Toast . makeText ( this @FormActivity , newValue , LENGTH_SHORT ). show () }) }","title":"Value Observers"},{"location":"element/base/#on-click-unit","text":"This unit is invoked when the form element is clicked. NOTE: The click event is not fired when a text field is clicked on to focus. Use onFocus to get the event when a field has focus. text { onClick = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } }","title":"On Click Unit"},{"location":"element/base/#on-focus-unit","text":"This unit is invoked when the form element is focused. text { onFocus = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } }","title":"On Focus Unit"},{"location":"element/base/#on-touch-up-unit","text":"This unit is invoked when the form element is touched up. text { onTouchUp = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } }","title":"On Touch Up Unit"},{"location":"element/base/#on-touch-down-unit","text":"This unit is invoked when the form element is touched down. text { onTouchDown = { Toast . makeText ( this @FormActivity , this . javaClass . simpleName , LENGTH_SHORT ). show () } }","title":"On Touch Down Unit"},{"location":"element/base/#on-title-icon-click-unit","text":"This unit is invoked when the title's icon is clicked. text { onTitleIconClick = { Toast . makeText ( this @FormActivity , \"Icon clicked\" , LENGTH_SHORT ). show () } }","title":"On Title Icon Click Unit"},{"location":"element/base/#options","text":"The list of options is used in form elements such as the Form Picker Dropdown Element and Form Picker MultiCheckBox Element. private val fruits = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" ), ListItem ( id = 3 , name = \"Mango\" ), ListItem ( id = 4 , name = \"Guava\" ), ListItem ( id = 5 , name = \"Apple\" ) ) dropDown < ListItem > { options = fruits value = ListItem ( id = 1 , name = \"Banana\" ) } multiCheckBox < List < ListItem >> { options = fruits value = listOf ( ListItem ( id = 1 , name = \"Banana\" )) }","title":"Options"},{"location":"element/base/#update-on-focus-change","text":"By default this is false. An EditText will update the form value as characters are typed. Setting this to true will only update the value when focus is lost or if Done is tapped on the keyboard. (See IME Options) text { updateOnFocusChange = true }","title":"Update On Focus Change"},{"location":"element/base/#input-type","text":"By default this is set by the form element type. Setting this will override the EditText form element's Input Type. text { inputType = InputType . TYPE_CLASS_TEXT or InputType . TYPE_TEXT_FLAG_NO_SUGGESTIONS }","title":"Input Type"},{"location":"element/base/#ime-options","text":"By default this is EditorInfo.IME_ACTION_NEXT. Setting this will override the EditText form element's IME Options. If EditorInfo.IME_ACTION_DONE is used, tapping Done on the keyboard will update the form element value. text { imeOptions = EditorInfo . IME_ACTION_DONE }","title":"IME Options"},{"location":"element/base/#input-mask-options","text":"By default edit text fields will not have any input mask format. Setting an input mask format will format the text field for the set value and as you type. phone { inputMaskOptions = InputMaskOptions ( primaryFormat = \"+1 ([000]) [000]-[0000]\" ) }","title":"Input Mask Options"},{"location":"element/base/#hint","text":"The hint is the hint (or placeholder) of the value field. text { hint = \"Enter a name\" }","title":"Hint"},{"location":"element/base/#max-length","text":"By default this is null which means that there is no max text length. Max length represents the number of characters the value field will allow. Unsupported Fields AutoComplete AutoCompleteToken text { maxLength = 10 }","title":"Max Length"},{"location":"element/base/#max-lines","text":"By default this is 1. TextArea defaults to 4. Max lines represents the number of lines the value field will display. Unsupported Fields Password Number Text (Use TextArea instead) textArea { maxLines = 3 }","title":"Max Lines"},{"location":"element/base/#edit-view-gravity","text":"By default, this is Gravity.END (Right to left). This determines the gravity of the text in the value field, button, or header. text { editViewGravity = Gravity . START }","title":"Edit View Gravity"},{"location":"element/base/#edit-view-paint-flags","text":"By default, this is null (No flags). This determines the extra paint flags for the edit view. text { editViewPaintFlags = Paint . UNDERLINE_TEXT_FLAG }","title":"Edit View Paint Flags"},{"location":"element/base/#error","text":"This is the error text displayed in red below the form element. text { error = \"That's an error\" }","title":"Error"},{"location":"element/base/#required","text":"By default this is false. Setting required to true will cause FormBuildHelper.isValidForm to return false if a value is not set. text { required = true }","title":"Required"},{"location":"element/base/#clearable","text":"By default this is false. Setting this to true will display a clear button (X) to set the value to null. Unsupported Fields AutoComplete AutoCompleteToken text { clearable = true }","title":"Clearable"},{"location":"element/base/#title-icon","text":"By default this is null. Setting this will set and display the title icon drawable (null will hide the icon). Button Setting this for the button form element will add the icon to the button. text { titleIcon = ContextCompat . getDrawable ( this @FormActivity , R . drawable . ic_email_blue_24dp ) }","title":"Title Icon"},{"location":"element/base/#title-icon-location","text":"By default this is IconTextView.Location.LEFT. Setting this set the title icon location (LEFT or RIGHT of the title). text { titleIconLocation = IconTextView . Location . RIGHT }","title":"Title Icon Location"},{"location":"element/base/#title-icon-padding","text":"By default this is 20. Setting this set the padding between the title text and icon. text { titleIconPadding = 25 }","title":"Title Icon Padding"},{"location":"element/base/#clear-on-focus","text":"By default this is false. Setting this to true will clear the text value of the form element when focused. Unsupported Fields AutoComplete AutoCompleteToken text { clearOnFocus = true }","title":"Clear On Focus"},{"location":"element/base/#visible","text":"By default this is true. Setting visible to false will hide the form element. text { visible = false }","title":"Visible"},{"location":"element/base/#enabled","text":"By default this is true. Setting enabled to false will disable the form element. This means that the click event will not fire when tapped, the text will be grayed out, and the value cannot be edited. Text View Use the TextView element if you just want a simple uneditable text element. text { enabled = false }","title":"Enabled"},{"location":"element/base/#clickable","text":"By default this is true. Setting clickable to false will disable click events. Use focusable Click events will still be fired unless focusable is also set to false. text { clickable = false }","title":"Clickable"},{"location":"element/base/#focusable","text":"By default this is true. Setting focusable to false will prevent a field from being focused. Focusable elements This value does not change the behavior of the form elements that cannot be focused. text { focusable = false }","title":"Focusable"},{"location":"element/base/#display-divider","text":"By default this is true. Setting displayDivider to false will hide the divider line displayed before the element. text { displayDivider = true }","title":"Display Divider"},{"location":"element/base/#display-title","text":"By default this is true. Setting displayTitle to false will hide the title. text { displayTitle = true }","title":"Display Title"},{"location":"element/base/#layout-padding-bottom-dp","text":"By default, this will use android:paddingBottom in the XML. Setting layoutPaddingBottom will override the bottom padding of the form element. text { layoutPaddingBottom = 0 }","title":"Layout Padding Bottom (DP)"},{"location":"element/base/#title-padding-dp","text":"Setting padding will override the padding of the form element title view. FormElementPadding FormElementPadding is a simple class to set all padding. text { titlePadding = FormElementPadding ( /* Left */ 16 , /* Top */ 16 , /* Right */ 16 , /* Bottom */ 0 ) }","title":"Title Padding (DP)"},{"location":"element/base/#padding-dp","text":"Setting padding will override the padding of the form element edit view. FormElementPadding FormElementPadding is a simple class to set all padding. text { padding = FormElementPadding ( /* Left */ 16 , /* Top */ 16 , /* Right */ 16 , /* Bottom */ 0 ) }","title":"Padding (DP)"},{"location":"element/base/#margins-dp","text":"By default, this will use layout_margin values in the XML. Setting margins will override the margins of the form element. FormElementMargins FormElementMargins is a simple class to set all margins. text { margins = FormElementMargins ( /* Left */ 16 , /* Top */ 16 , /* Right */ 16 , /* Bottom */ 0 ) }","title":"Margins (DP)"},{"location":"element/base/#confirm-edit","text":"By default this is false. Setting confirmEdit to true will display an alert dialog confirming if the user wishes to edit the value if a current value exists. Currently, this only applies to the picker elements that display a dialog. date { confirmEdit = true }","title":"Confirm Edit"},{"location":"element/base/#confirm-title","text":"By default this is \"Confirm Edit\". Setting this will override the confirm edit dialog title. date { confirmTitle = \"Really edit this?\" }","title":"Confirm Title"},{"location":"element/base/#confirm-message","text":"By default this is \"Edit this value?\". Setting this will override the confirm edit dialog message. date { confirmMessage = \"Are you ABSOLUTELY sure?\" }","title":"Confirm Message"},{"location":"element/base/#background-color","text":"By default this is the value of R.Color.colorFormMasterElementBackground. Setting this will override the background color. text { backgroundColor = Color . WHITE }","title":"Background Color"},{"location":"element/base/#title-text-color","text":"By default this is the value of R.Color.colorFormMasterElementTextTitle. Setting this will override the title text color. text { titleTextColor = Color . BLACK }","title":"Title Text Color"},{"location":"element/base/#title-focused-text-color","text":"By default this is the value of R.Color.colorFormMasterElementFocusedTitle. Setting this will override the title text (when focused) color. text { titleFocusedTextColor = Color . BLACK }","title":"Title Focused Text Color"},{"location":"element/base/#value-text-color","text":"By default this is the value of R.Color.colorFormMasterElementTextValue. Setting this will override the value text color. text { valueTextColor = Color . BLACK }","title":"Value Text Color"},{"location":"element/base/#error-text-color","text":"By default this is the value of R.Color.colorFormMasterElementErrorTitle. Setting this will override the error text color. text { errorTextColor = Color . BLACK }","title":"Error Text Color"},{"location":"element/base/#hint-text-color","text":"By default this is the value of R.Color.colorFormMasterElementHint. Setting this will override the hint text color. text { hintTextColor = Color . BLACK }","title":"Hint Text Color"},{"location":"element/base/#clear-value","text":"Clear the value of the element. element . clear ()","title":"Clear value"},{"location":"element/base/#is-the-value-valid","text":"isValid contains a getter that checks if the element is valid. At the base level, this checks if the value is not null or empty. This is used by formBuilder.isValidForm. element . isValid","title":"Is the value valid?"},{"location":"element/base/#custom-validation","text":"To add custom validation check, assign a lambda to validityCheck. text { validityCheck = { value ?. matches ( \"some regex\" . toRegex ()) == true } }","title":"Custom Validation"},{"location":"element/base/#display-new-value","text":"This function is called when the value changes to display the new value specific to the form element. By default, this handles setting the text of the AppCompatEditText view. element . displayNewValue ()","title":"Display New Value"},{"location":"element/base/#dynamic-views","text":"NOTICE The Item View, Title View, Edit View, and Error View are accessible from the model to support changing variables such as the title, value, visibility, and error. However, try not to use the views directly. Let the variable setters do the work for you. Also, the views cannot be modified during the creation of the form elements as they are initialized during the render of the RecyclerView.","title":"Dynamic Views"},{"location":"element/button/","text":"The Button form element is used for a button row. Click events can be caught with a valueObserver. Title Icon \u00b6 By default this is null. Setting this will set and display the title icon drawable (null will hide the icon). Button Setting this for the button form element will add the icon to the button. button { titleIcon = ContextCompat . getDrawable ( this @FormActivity , R . drawable . ic_email_blue_24dp ) } Example \u00b6 Kotlin \u00b6 button ( 1 ) { value = \"Button Text\" valueObservers . add ({ _ , _ -> // Nothing was changed but the button was tapped! }) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormButtonElement button = new FormButtonElement ( 1 ); button . setValue ( \"Button Text\" ); button . getValueObservers (). add (( newValue , element ) -> { // Nothing was changed but the button was tapped! return Unit . INSTANCE ; }); elements . add ( button );","title":"Button"},{"location":"element/button/#title-icon","text":"By default this is null. Setting this will set and display the title icon drawable (null will hide the icon). Button Setting this for the button form element will add the icon to the button. button { titleIcon = ContextCompat . getDrawable ( this @FormActivity , R . drawable . ic_email_blue_24dp ) }","title":"Title Icon"},{"location":"element/button/#example","text":"","title":"Example"},{"location":"element/button/#kotlin","text":"button ( 1 ) { value = \"Button Text\" valueObservers . add ({ _ , _ -> // Nothing was changed but the button was tapped! }) }","title":"Kotlin"},{"location":"element/button/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormButtonElement button = new FormButtonElement ( 1 ); button . setValue ( \"Button Text\" ); button . getValueObservers (). add (( newValue , element ) -> { // Nothing was changed but the button was tapped! return Unit . INSTANCE ; }); elements . add ( button );","title":"Java"},{"location":"element/checkBox/","text":"The CheckBox form element is used for a checkbox row. Checked and UnChecked Values \u00b6 The value is set to checkedValue when checked. The value is set to unCheckedValue when unChecked. Example \u00b6 Kotlin \u00b6 checkBox < Boolean >( 1 ) { value = true checkedValue = true unCheckedValue = false } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormCheckBoxElement < Boolean > checkBox = new FormCheckBoxElement <> ( 1 ); checkBox . setValue ( true ); checkBox . setCheckedValue ( true ); checkBox . setUnCheckedValue ( false ); elements . add ( checkBox );","title":"CheckBox"},{"location":"element/checkBox/#checked-and-unchecked-values","text":"The value is set to checkedValue when checked. The value is set to unCheckedValue when unChecked.","title":"Checked and UnChecked Values"},{"location":"element/checkBox/#example","text":"","title":"Example"},{"location":"element/checkBox/#kotlin","text":"checkBox < Boolean >( 1 ) { value = true checkedValue = true unCheckedValue = false }","title":"Kotlin"},{"location":"element/checkBox/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormCheckBoxElement < Boolean > checkBox = new FormCheckBoxElement <> ( 1 ); checkBox . setValue ( true ); checkBox . setCheckedValue ( true ); checkBox . setUnCheckedValue ( false ); elements . add ( checkBox );","title":"Java"},{"location":"element/date/","text":"The Date form element is used for a date dialog. Theme \u00b6 Set this override the default alert dialog theme. date ( 1 ) { theme = R . style . CustomDialogPicker } Value You can set value directly by creating a new instance of FormPickerDateElement.DateHolder. However, dateValue and dateFormat will create the instance for you. Call getTime() on value to get a Date object back. Date Value \u00b6 A java.util.Date value. Date Format \u00b6 A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format. Minimum Date \u00b6 A java.util.Date value to set the minimum date for the Date picker. Maximum Date \u00b6 A java.util.Date value to set the maximum date for the Date picker. Start Date \u00b6 A java.util.Date to use if the date value is null. This will set the date picker to this date without showing a value on the form. Example \u00b6 Kotlin \u00b6 date ( 1 ) { dateValue = Date () dateFormat = SimpleDateFormat ( \"MM/dd/yyyy\" , Locale . US ) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerDateElement date = new FormPickerDateElement ( 1 ); date . setDateValue ( new Date ()); date . setDateFormat ( new SimpleDateFormat ( \"MM/dd/yyyy\" , Locale . US )); elements . add ( date );","title":"Date"},{"location":"element/date/#theme","text":"Set this override the default alert dialog theme. date ( 1 ) { theme = R . style . CustomDialogPicker } Value You can set value directly by creating a new instance of FormPickerDateElement.DateHolder. However, dateValue and dateFormat will create the instance for you. Call getTime() on value to get a Date object back.","title":"Theme"},{"location":"element/date/#date-value","text":"A java.util.Date value.","title":"Date Value"},{"location":"element/date/#date-format","text":"A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.","title":"Date Format"},{"location":"element/date/#minimum-date","text":"A java.util.Date value to set the minimum date for the Date picker.","title":"Minimum Date"},{"location":"element/date/#maximum-date","text":"A java.util.Date value to set the maximum date for the Date picker.","title":"Maximum Date"},{"location":"element/date/#start-date","text":"A java.util.Date to use if the date value is null. This will set the date picker to this date without showing a value on the form.","title":"Start Date"},{"location":"element/date/#example","text":"","title":"Example"},{"location":"element/date/#kotlin","text":"date ( 1 ) { dateValue = Date () dateFormat = SimpleDateFormat ( \"MM/dd/yyyy\" , Locale . US ) }","title":"Kotlin"},{"location":"element/date/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerDateElement date = new FormPickerDateElement ( 1 ); date . setDateValue ( new Date ()); date . setDateFormat ( new SimpleDateFormat ( \"MM/dd/yyyy\" , Locale . US )); elements . add ( date );","title":"Java"},{"location":"element/dateTime/","text":"The DateTime form element is used for a date and then time dialog. The date dialog is displayed first and then the time dialog is displayed. Theme \u00b6 Set this override the default alert dialog theme. dateTime ( 1 ) { theme = R . style . CustomDialogPicker } Value You can set value directly by creating a new instance of FormPickerDateTimeElement.DateTimeHolder. However, dateValue and dateFormat will create the instance for you. Call getTime() on value to get a Date object back. Date Value \u00b6 A java.util.Date value. Date Format \u00b6 A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format. Minimum Date \u00b6 A java.util.Date value to set the minimum date for the Date picker. Maximum Date \u00b6 A java.util.Date value to set the maximum date for the Date picker. Is 24 Hour View \u00b6 If true, displays the time dialog in the 24 hour view. By default this is false. Start Date \u00b6 A java.util.Date to use if the date value is null. This will set the date and time picker to this date without showing a value on the form. Example \u00b6 Kotlin \u00b6 dateTime ( 1 ) { dateValue = Date () dateFormat = SimpleDateFormat ( \"MM/dd/yyyy hh:mm a\" , Locale . US ) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerDateTimeElement dateTime = new FormPickerDateTimeElement ( 1 ); dateTime . setDateValue ( new Date ()); dateTime . setDateFormat ( new SimpleDateFormat ( \"MM/dd/yyyy hh:mm a\" , Locale . US )); elements . add ( dateTime );","title":"DateTime"},{"location":"element/dateTime/#theme","text":"Set this override the default alert dialog theme. dateTime ( 1 ) { theme = R . style . CustomDialogPicker } Value You can set value directly by creating a new instance of FormPickerDateTimeElement.DateTimeHolder. However, dateValue and dateFormat will create the instance for you. Call getTime() on value to get a Date object back.","title":"Theme"},{"location":"element/dateTime/#date-value","text":"A java.util.Date value.","title":"Date Value"},{"location":"element/dateTime/#date-format","text":"A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.","title":"Date Format"},{"location":"element/dateTime/#minimum-date","text":"A java.util.Date value to set the minimum date for the Date picker.","title":"Minimum Date"},{"location":"element/dateTime/#maximum-date","text":"A java.util.Date value to set the maximum date for the Date picker.","title":"Maximum Date"},{"location":"element/dateTime/#is-24-hour-view","text":"If true, displays the time dialog in the 24 hour view. By default this is false.","title":"Is 24 Hour View"},{"location":"element/dateTime/#start-date","text":"A java.util.Date to use if the date value is null. This will set the date and time picker to this date without showing a value on the form.","title":"Start Date"},{"location":"element/dateTime/#example","text":"","title":"Example"},{"location":"element/dateTime/#kotlin","text":"dateTime ( 1 ) { dateValue = Date () dateFormat = SimpleDateFormat ( \"MM/dd/yyyy hh:mm a\" , Locale . US ) }","title":"Kotlin"},{"location":"element/dateTime/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerDateTimeElement dateTime = new FormPickerDateTimeElement ( 1 ); dateTime . setDateValue ( new Date ()); dateTime . setDateFormat ( new SimpleDateFormat ( \"MM/dd/yyyy hh:mm a\" , Locale . US )); elements . add ( dateTime );","title":"Java"},{"location":"element/dropDown/","text":"The DropDown form element is used for a single choice dialog. NOTICE The ListItem, ContactItem, and ContactAutoCompleteAdapter classes are provided in the example app. Theme \u00b6 Set this to override the default alert dialog theme. dropDown < ListItem >( 1 ) { theme = R . style . CustomDialogPicker } Display Value For \u00b6 This can be used to set the text that is displayed in the options and field. Your custom class can also just override toString() to display in the dialog. dropDown < ListItem >( 1 ) { displayValueFor = { it ?. name } } Array Adapter \u00b6 Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call. dropDown < ContactItem >( 1 ) { arrayAdapter = ContactAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) } Display Radio Buttons \u00b6 By default this is false. Enable to display the radio buttons dropDown < ListItem >( 1 ) { displayRadioButtons = true } Dialog Title \u00b6 By default this is \"Select One\". Setting this will override the alert dialog title. dropDown < ListItem >( 1 ) { dialogTitle = \"Select One\" } Dialog Empty Message \u00b6 By default this is \"Empty\". Setting this will override the alert dialog message when the options list is empty or null. dropDown < ListItem >( 1 ) { dialogEmptyMessage = \"Nothing to see here\" } Example \u00b6 Kotlin \u00b6 dropDown < ListItem >( 1 ) { dialogTitle = \"Select One\" options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = ListItem ( id = 1 , name = \"Banana\" ) } Java \u00b6 FormPickerDropDownElement < ListItem > dropDown = new FormPickerDropDownElement <> ( 1 ); dropDown . setDialogTitle ( \"Select One\" ); dropDown . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); dropDown . setValue ( new ListItem ( 1L , \"Banana\" )); elements . add ( dropDown );","title":"Dropdown"},{"location":"element/dropDown/#theme","text":"Set this to override the default alert dialog theme. dropDown < ListItem >( 1 ) { theme = R . style . CustomDialogPicker }","title":"Theme"},{"location":"element/dropDown/#display-value-for","text":"This can be used to set the text that is displayed in the options and field. Your custom class can also just override toString() to display in the dialog. dropDown < ListItem >( 1 ) { displayValueFor = { it ?. name } }","title":"Display Value For"},{"location":"element/dropDown/#array-adapter","text":"Set your custom AutoComplete adapter. It is up to you if you want to retrieve items through an API call. dropDown < ContactItem >( 1 ) { arrayAdapter = ContactAutoCompleteAdapter ( this @FormActivity , android . R . layout . simple_list_item_1 ) }","title":"Array Adapter"},{"location":"element/dropDown/#display-radio-buttons","text":"By default this is false. Enable to display the radio buttons dropDown < ListItem >( 1 ) { displayRadioButtons = true }","title":"Display Radio Buttons"},{"location":"element/dropDown/#dialog-title","text":"By default this is \"Select One\". Setting this will override the alert dialog title. dropDown < ListItem >( 1 ) { dialogTitle = \"Select One\" }","title":"Dialog Title"},{"location":"element/dropDown/#dialog-empty-message","text":"By default this is \"Empty\". Setting this will override the alert dialog message when the options list is empty or null. dropDown < ListItem >( 1 ) { dialogEmptyMessage = \"Nothing to see here\" }","title":"Dialog Empty Message"},{"location":"element/dropDown/#example","text":"","title":"Example"},{"location":"element/dropDown/#kotlin","text":"dropDown < ListItem >( 1 ) { dialogTitle = \"Select One\" options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = ListItem ( id = 1 , name = \"Banana\" ) }","title":"Kotlin"},{"location":"element/dropDown/#java","text":"FormPickerDropDownElement < ListItem > dropDown = new FormPickerDropDownElement <> ( 1 ); dropDown . setDialogTitle ( \"Select One\" ); dropDown . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); dropDown . setValue ( new ListItem ( 1L , \"Banana\" )); elements . add ( dropDown );","title":"Java"},{"location":"element/email/","text":"The Email form element is used for an email address value field with the email keyboard layout. Example \u00b6 Kotlin \u00b6 email ( 1 ) { value = \"example@example.com\" } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormEmailEditTextElement email = new FormEmailEditTextElement ( 1 ); email . setValue ( \"example@example.com\" ); elements . add ( email );","title":"Email"},{"location":"element/email/#example","text":"","title":"Example"},{"location":"element/email/#kotlin","text":"email ( 1 ) { value = \"example@example.com\" }","title":"Kotlin"},{"location":"element/email/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormEmailEditTextElement email = new FormEmailEditTextElement ( 1 ); email . setValue ( \"example@example.com\" ); elements . add ( email );","title":"Java"},{"location":"element/header/","text":"The Header element is used as a header row. Collapsible \u00b6 By default this is false. Setting this to true will allow the form header to \"collapse/uncollapse\" (Hide/Show) elements below it when tapped. header { collapsible = true } All Collapsed \u00b6 By default this is false. This indicates if elements under the form header are collapsed or not. header { allCollapsed = true } Set All Collapsed Later \u00b6 Use setAllCollapsed(collapse, formBuilder) to collapse/uncollapse elements after initialization. Collapse or uncollapse all elements under the header until the next header. // Reverse Collapse header . setAllCollapsed (! header . allCollapsed , formBuilder ) // Reverse Collapse for all headers formBuilder . elements . forEach { if ( it is FormHeader ) { it . setAllCollapsed (! it . allCollapsed , formBuilder ) } } Example \u00b6 Kotlin \u00b6 header { title = \"I'm a header row\" ; collapsible = true } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormHeader header = new FormHeader ( \"I'm a header row\" ); elements . add ( header );","title":"Header"},{"location":"element/header/#collapsible","text":"By default this is false. Setting this to true will allow the form header to \"collapse/uncollapse\" (Hide/Show) elements below it when tapped. header { collapsible = true }","title":"Collapsible"},{"location":"element/header/#all-collapsed","text":"By default this is false. This indicates if elements under the form header are collapsed or not. header { allCollapsed = true }","title":"All Collapsed"},{"location":"element/header/#set-all-collapsed-later","text":"Use setAllCollapsed(collapse, formBuilder) to collapse/uncollapse elements after initialization. Collapse or uncollapse all elements under the header until the next header. // Reverse Collapse header . setAllCollapsed (! header . allCollapsed , formBuilder ) // Reverse Collapse for all headers formBuilder . elements . forEach { if ( it is FormHeader ) { it . setAllCollapsed (! it . allCollapsed , formBuilder ) } }","title":"Set All Collapsed Later"},{"location":"element/header/#example","text":"","title":"Example"},{"location":"element/header/#kotlin","text":"header { title = \"I'm a header row\" ; collapsible = true }","title":"Kotlin"},{"location":"element/header/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormHeader header = new FormHeader ( \"I'm a header row\" ); elements . add ( header );","title":"Java"},{"location":"element/imageView/","text":"The Image View form element is used to show an image and when tapped display options to get a new image from the camera or gallery app. Example \u00b6 Kotlin \u00b6 imageView ( 1 ) { displayDivider = false imageTransformation = CircleTransform ( borderColor = Color . WHITE , borderRadius = 3 ) required = false showChangeImageLabel = true changeImageLabel = \"Change me\" displayImageHeight = 200 displayImageWidth = 200 theme = R . style . CustomDialogPicker defaultImage = R . drawable . default_image value = \"http://example.com/\" imagePickerOptions = { it . cropX = 3f it . cropY = 4f it . maxWidth = 150 it . maxHeight = 200 it . maxSize = 500 } onSelectImage = { file -> // If file is null, that means an error occurred trying to select the image if ( file != null ) { Toast . makeText ( context , file . name , Toast . LENGTH_SHORT ). show () } else { Toast . makeText ( context , \"Error getting the image\" , Toast . LENGTH_LONG ). show () } } } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormImageElement imageView = new FormImageElement ( 1 ); imageView . setOnSelectImage (( file ) -> { if ( file != null ) { Toast . makeText ( this , file . getName (), Toast . LENGTH_SHORT ). show (); } else { Toast . makeText ( this , \"Error getting the image\" , Toast . LENGTH_LONG ). show (); } return Unit . INSTANCE ; }); elements . add ( imageView );","title":"Image View"},{"location":"element/imageView/#example","text":"","title":"Example"},{"location":"element/imageView/#kotlin","text":"imageView ( 1 ) { displayDivider = false imageTransformation = CircleTransform ( borderColor = Color . WHITE , borderRadius = 3 ) required = false showChangeImageLabel = true changeImageLabel = \"Change me\" displayImageHeight = 200 displayImageWidth = 200 theme = R . style . CustomDialogPicker defaultImage = R . drawable . default_image value = \"http://example.com/\" imagePickerOptions = { it . cropX = 3f it . cropY = 4f it . maxWidth = 150 it . maxHeight = 200 it . maxSize = 500 } onSelectImage = { file -> // If file is null, that means an error occurred trying to select the image if ( file != null ) { Toast . makeText ( context , file . name , Toast . LENGTH_SHORT ). show () } else { Toast . makeText ( context , \"Error getting the image\" , Toast . LENGTH_LONG ). show () } } }","title":"Kotlin"},{"location":"element/imageView/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormImageElement imageView = new FormImageElement ( 1 ); imageView . setOnSelectImage (( file ) -> { if ( file != null ) { Toast . makeText ( this , file . getName (), Toast . LENGTH_SHORT ). show (); } else { Toast . makeText ( this , \"Error getting the image\" , Toast . LENGTH_LONG ). show (); } return Unit . INSTANCE ; }); elements . add ( imageView );","title":"Java"},{"location":"element/inlineDatePicker/","text":"The Inline Date Picker form element is used for an inline date spinner on the form on tap. Init Init AndroidThreeTen in your Application. AndroidThreeTen.init(applicationContext) Value Value is of type org.threeten.bp.LocalDateTime to keep support for SDK API Level 19. LocalDateTime Value \u00b6 A org.threeten.bp.LocalDateTime value. DateTime Format \u00b6 A org.threeten.bp.format.DateTimeFormatter value. By default this is DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL). It is advised to provide your own format. DateTime Picker Format \u00b6 Date Time Format for displaying on the picker with the date and time (allDay = false). By default this is DateTimeFormatter.ISO_DATE. All Day \u00b6 By default, this is false which shows the time picker. Set to true to hide the time picker. Start Date \u00b6 Start Date for the picker if value is null. Picker Type \u00b6 By default, this is PickerType.Primary. Set to PickerType.Secondary for the second Linked Picker. Linked Picker \u00b6 Links two FormInlineDatePickerElements together. Date Error \u00b6 By default, this is false. The secondary linked date picker will set this to true when the date is before the primary date linked picker. Example \u00b6 Kotlin \u00b6 inlineDatePicker ( 1 ) { value = org . threeten . bp . LocalDateTime . now () dateTimeFormatter = DateTimeFormatter . ofPattern ( \"MM/dd/yyyy hh:mm a\" , Locale . US ) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormInlineDatePickerElement inlineDatePicker = new FormInlineDatePickerElement ( Tag . InlineDatePicker . ordinal ()); inlineDatePicker . setValue ( org . threeten . bp . LocalDateTime . now ()); inlineDatePicker . setDateTimeFormatter ( DateTimeFormatter . ofPattern ( \"MM/dd/yyyy hh:mm a\" , Locale . US )); elements . add ( inlineDatePicker );","title":"InlineDatePicker"},{"location":"element/inlineDatePicker/#localdatetime-value","text":"A org.threeten.bp.LocalDateTime value.","title":"LocalDateTime Value"},{"location":"element/inlineDatePicker/#datetime-format","text":"A org.threeten.bp.format.DateTimeFormatter value. By default this is DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL). It is advised to provide your own format.","title":"DateTime Format"},{"location":"element/inlineDatePicker/#datetime-picker-format","text":"Date Time Format for displaying on the picker with the date and time (allDay = false). By default this is DateTimeFormatter.ISO_DATE.","title":"DateTime Picker Format"},{"location":"element/inlineDatePicker/#all-day","text":"By default, this is false which shows the time picker. Set to true to hide the time picker.","title":"All Day"},{"location":"element/inlineDatePicker/#start-date","text":"Start Date for the picker if value is null.","title":"Start Date"},{"location":"element/inlineDatePicker/#picker-type","text":"By default, this is PickerType.Primary. Set to PickerType.Secondary for the second Linked Picker.","title":"Picker Type"},{"location":"element/inlineDatePicker/#linked-picker","text":"Links two FormInlineDatePickerElements together.","title":"Linked Picker"},{"location":"element/inlineDatePicker/#date-error","text":"By default, this is false. The secondary linked date picker will set this to true when the date is before the primary date linked picker.","title":"Date Error"},{"location":"element/inlineDatePicker/#example","text":"","title":"Example"},{"location":"element/inlineDatePicker/#kotlin","text":"inlineDatePicker ( 1 ) { value = org . threeten . bp . LocalDateTime . now () dateTimeFormatter = DateTimeFormatter . ofPattern ( \"MM/dd/yyyy hh:mm a\" , Locale . US ) }","title":"Kotlin"},{"location":"element/inlineDatePicker/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormInlineDatePickerElement inlineDatePicker = new FormInlineDatePickerElement ( Tag . InlineDatePicker . ordinal ()); inlineDatePicker . setValue ( org . threeten . bp . LocalDateTime . now ()); inlineDatePicker . setDateTimeFormatter ( DateTimeFormatter . ofPattern ( \"MM/dd/yyyy hh:mm a\" , Locale . US )); elements . add ( inlineDatePicker );","title":"Java"},{"location":"element/label/","text":"The Label form element is used for a title only field. Example \u00b6 Kotlin \u00b6 label ( 1 ) { title = \"This is a label. The title takes up the whole row.\" } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormLabelElement label = new FormLabelElement ( 1 ); label . setTitle ( \"This is a label. The title takes up the whole row.\" ); elements . add ( label );","title":"Label"},{"location":"element/label/#example","text":"","title":"Example"},{"location":"element/label/#kotlin","text":"label ( 1 ) { title = \"This is a label. The title takes up the whole row.\" }","title":"Kotlin"},{"location":"element/label/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormLabelElement label = new FormLabelElement ( 1 ); label . setTitle ( \"This is a label. The title takes up the whole row.\" ); elements . add ( label );","title":"Java"},{"location":"element/multiCheckBox/","text":"The MultiCheckBox form element is used for a multiple choice dialog. NOTICE The ListItem class is provided in the example app. Your custom class just needs to override toString() to display in the dialog. Theme \u00b6 Set this override the default alert dialog theme. multiCheckBox < ListItem , List < ListItem >>( 1 ) { theme = R . style . CustomDialogPicker } Dialog Title \u00b6 By default this is \"Pick one or more\". Setting this will override the alert dialog title. multiCheckBox < ListItem , List < ListItem >>( 1 ) { dialogTitle = \"Pick one or more\" } Dialog Empty Message \u00b6 By default this is \"Empty\". Setting this will override the alert dialog message when the options list is empty or null. multiCheckBox < ListItem , List < ListItem >>( 1 ) { dialogEmptyMessage = \"Nothing to see here\" } Value as String Override \u00b6 This can be used to set the text that is displayed in the field. By default, the field will display the string values of the selected objects separated by commas. multiCheckBox < ListItem , List < ListItem >>( 1 ) { valueAsStringOverride = { it ?. name } } Display Value For \u00b6 This can be used to set the text that is displayed in the options. Your custom class can also just override toString() to display in the dialog. multiCheckBox < ListItem , List < ListItem >>( 1 ) { displayValueFor = { it ?. name } } Example \u00b6 Kotlin \u00b6 multiCheckBox < ListItem , List < ListItem >>( 1 ) { dialogTitle = \"Pick one or more\" options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = listOf ( ListItem ( id = 1 , name = \"Banana\" )) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerMultiCheckBoxElement < ListItem , List < ListItem >> multiCheckBox = new FormPickerMultiCheckBoxElement <> ( Tag . MultiItems . ordinal ()); multiCheckBox . setDialogTitle ( \"Pick one or more\" ); multiCheckBox . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); multiCheckBox . setValue ( Collections . singletonList ( new ListItem ( 1L , \"Banana\" ))); elements . add ( multiCheckBox );","title":"MultiCheckBox"},{"location":"element/multiCheckBox/#theme","text":"Set this override the default alert dialog theme. multiCheckBox < ListItem , List < ListItem >>( 1 ) { theme = R . style . CustomDialogPicker }","title":"Theme"},{"location":"element/multiCheckBox/#dialog-title","text":"By default this is \"Pick one or more\". Setting this will override the alert dialog title. multiCheckBox < ListItem , List < ListItem >>( 1 ) { dialogTitle = \"Pick one or more\" }","title":"Dialog Title"},{"location":"element/multiCheckBox/#dialog-empty-message","text":"By default this is \"Empty\". Setting this will override the alert dialog message when the options list is empty or null. multiCheckBox < ListItem , List < ListItem >>( 1 ) { dialogEmptyMessage = \"Nothing to see here\" }","title":"Dialog Empty Message"},{"location":"element/multiCheckBox/#value-as-string-override","text":"This can be used to set the text that is displayed in the field. By default, the field will display the string values of the selected objects separated by commas. multiCheckBox < ListItem , List < ListItem >>( 1 ) { valueAsStringOverride = { it ?. name } }","title":"Value as String Override"},{"location":"element/multiCheckBox/#display-value-for","text":"This can be used to set the text that is displayed in the options. Your custom class can also just override toString() to display in the dialog. multiCheckBox < ListItem , List < ListItem >>( 1 ) { displayValueFor = { it ?. name } }","title":"Display Value For"},{"location":"element/multiCheckBox/#example","text":"","title":"Example"},{"location":"element/multiCheckBox/#kotlin","text":"multiCheckBox < ListItem , List < ListItem >>( 1 ) { dialogTitle = \"Pick one or more\" options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = listOf ( ListItem ( id = 1 , name = \"Banana\" )) }","title":"Kotlin"},{"location":"element/multiCheckBox/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerMultiCheckBoxElement < ListItem , List < ListItem >> multiCheckBox = new FormPickerMultiCheckBoxElement <> ( Tag . MultiItems . ordinal ()); multiCheckBox . setDialogTitle ( \"Pick one or more\" ); multiCheckBox . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); multiCheckBox . setValue ( Collections . singletonList ( new ListItem ( 1L , \"Banana\" ))); elements . add ( multiCheckBox );","title":"Java"},{"location":"element/multiLine/","text":"The Multi Line form element is used for a multi line value field. Example \u00b6 Kotlin \u00b6 textArea ( 1 ) { value = \"Example\" maxLines = 3 } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormMultiLineEditTextElement textArea = new FormMultiLineEditTextElement ( 1 ); textArea . setValue ( \"Example\" ); textArea . setMaxLines ( 3 ); elements . add ( textArea );","title":"Multi Line"},{"location":"element/multiLine/#example","text":"","title":"Example"},{"location":"element/multiLine/#kotlin","text":"textArea ( 1 ) { value = \"Example\" maxLines = 3 }","title":"Kotlin"},{"location":"element/multiLine/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormMultiLineEditTextElement textArea = new FormMultiLineEditTextElement ( 1 ); textArea . setValue ( \"Example\" ); textArea . setMaxLines ( 3 ); elements . add ( textArea );","title":"Java"},{"location":"element/number/","text":"The Number element is used for a number value field with the number keyboard layout. NOTICE The value is a String. It is up to you to convert the resulting value to a number if necessary. val num : Int = newValue ?. toInt () ?: 0 Numbers Only \u00b6 By default this is false. Setting this to true will only allow numbers to be entered in the value field. number { numbersOnly = true } Example \u00b6 Kotlin \u00b6 number ( 1 ) { value = 1234 numbersOnly = true } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormNumberEditTextElement number = new FormNumberEditTextElement ( 1 ); number . setValue ( 1234 ); number . setNumbersOnly ( true ); elements . add ( number );","title":"Number"},{"location":"element/number/#numbers-only","text":"By default this is false. Setting this to true will only allow numbers to be entered in the value field. number { numbersOnly = true }","title":"Numbers Only"},{"location":"element/number/#example","text":"","title":"Example"},{"location":"element/number/#kotlin","text":"number ( 1 ) { value = 1234 numbersOnly = true }","title":"Kotlin"},{"location":"element/number/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormNumberEditTextElement number = new FormNumberEditTextElement ( 1 ); number . setValue ( 1234 ); number . setNumbersOnly ( true ); elements . add ( number );","title":"Java"},{"location":"element/password/","text":"The Password form element is used for a password value field. This field is masked. Example \u00b6 Kotlin \u00b6 password ( 1 ) { value = \"hunter2\" } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormPasswordEditTextElement password = new FormPasswordEditTextElement ( 1 ); password . setValue ( \"hunter2\" ); elements . add ( password );","title":"Password"},{"location":"element/password/#example","text":"","title":"Example"},{"location":"element/password/#kotlin","text":"password ( 1 ) { value = \"hunter2\" }","title":"Kotlin"},{"location":"element/password/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormPasswordEditTextElement password = new FormPasswordEditTextElement ( 1 ); password . setValue ( \"hunter2\" ); elements . add ( password );","title":"Java"},{"location":"element/phone/","text":"The Phone form element is used for a phone number value field with the phone keyboard layout. Example \u00b6 Kotlin \u00b6 phone ( 1 ) { value = \"(555) 555-5555\" } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormPhoneEditTextElement phone = new FormPhoneEditTextElement ( 1 ); phone . setValue ( \"(555) 555-5555\" ); elements . add ( phone );","title":"Phone"},{"location":"element/phone/#example","text":"","title":"Example"},{"location":"element/phone/#kotlin","text":"phone ( 1 ) { value = \"(555) 555-5555\" }","title":"Kotlin"},{"location":"element/phone/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormPhoneEditTextElement phone = new FormPhoneEditTextElement ( 1 ); phone . setValue ( \"(555) 555-5555\" ); elements . add ( phone );","title":"Java"},{"location":"element/progress/","text":"The Progress form element is used for a progress bar row. Min \u00b6 Min is the minimum number for the progress bar. Max \u00b6 Max is the maximum number for the progress bar. Progress bar style \u00b6 By default this is ProgressBarStyle.HorizontalBar. Setting this will change the progress bar style. progress ( 1 ) { progressBarStyle = FormProgressElement . ProgressBarStyle . HorizontalBar } Intermediate \u00b6 By default this is false. Determines if the progress bar should be intermediate. progress ( 1 ) { indeterminate = true } Progress \u00b6 The progress value of the progress bar progress ( 1 ) { progress = 25 } Secondary Progress \u00b6 The secondary progress value of the progress bar progress ( 1 ) { secondaryProgress = 50 } Example \u00b6 Kotlin \u00b6 progress ( 1 ) { indeterminate = false progress = 25 secondaryProgress = 50 min = 0 max = 100 } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormProgressElement progress = new FormProgressElement ( 1 ); progress . setIndeterminate ( false ); progress . setProgress ( 25 ); progress . setSecondaryProgress ( 50 ); progress . setMin ( 50 ); progress . setMax ( 100 ); elements . add ( progress );","title":"Progress"},{"location":"element/progress/#min","text":"Min is the minimum number for the progress bar.","title":"Min"},{"location":"element/progress/#max","text":"Max is the maximum number for the progress bar.","title":"Max"},{"location":"element/progress/#progress-bar-style","text":"By default this is ProgressBarStyle.HorizontalBar. Setting this will change the progress bar style. progress ( 1 ) { progressBarStyle = FormProgressElement . ProgressBarStyle . HorizontalBar }","title":"Progress bar style"},{"location":"element/progress/#intermediate","text":"By default this is false. Determines if the progress bar should be intermediate. progress ( 1 ) { indeterminate = true }","title":"Intermediate"},{"location":"element/progress/#progress","text":"The progress value of the progress bar progress ( 1 ) { progress = 25 }","title":"Progress"},{"location":"element/progress/#secondary-progress","text":"The secondary progress value of the progress bar progress ( 1 ) { secondaryProgress = 50 }","title":"Secondary Progress"},{"location":"element/progress/#example","text":"","title":"Example"},{"location":"element/progress/#kotlin","text":"progress ( 1 ) { indeterminate = false progress = 25 secondaryProgress = 50 min = 0 max = 100 }","title":"Kotlin"},{"location":"element/progress/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormProgressElement progress = new FormProgressElement ( 1 ); progress . setIndeterminate ( false ); progress . setProgress ( 25 ); progress . setSecondaryProgress ( 50 ); progress . setMin ( 50 ); progress . setMax ( 100 ); elements . add ( progress );","title":"Java"},{"location":"element/segmented/","text":"The Segmented form element is used for a radio group. NOTICE The ListItem class is provided in the example app. Your custom class just needs to override toString() to display in the segmented group. SegmentedDrawable The SegmentedDrawable interface must be implemented by your custom class to provide the drawableRes. Example: fruitsSegmented[0].drawableRes = R.drawable.icons8_banana Horizontal \u00b6 By default this is true. Setting this to false will stack the radio buttons vertically. segmented < ListItem >( 1 ) { horizontal = false } Fill Space \u00b6 By default this is false. Setting this to true will fill the whole width. segmented < ListItem >( 1 ) { fillSpace = true } Drawable Direction \u00b6 By default this is DrawableDirection.Top. Setting this will change where the drawable is displayed relative to the text. Center DrawableDirection.Center will center the drawable. This also removes the text. segmented < ListItem >( 1 ) { drawableDirection = FormSegmentedElement . DrawableDirection . Top } Tint Color \u00b6 By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the tint color for each radio button. segmented < ListItem >( 1 ) { tintColor = Color . BLUE } Margin (Stroke) \u00b6 By default this is the value of R.dimen.elementRadioStrokeBorder. Setting this will set the margin (stroke) for each radio button. segmented < ListItem >( 1 ) { marginDp = 5 } Unchecked Tint Color \u00b6 By default this is the value of R.color.colorFormMasterElementRadioUnSelected. Setting this will set the unchecked tint color for each radio button. segmented < ListItem >( 1 ) { unCheckedTintColor = Color . WHITE } Checked Text Color \u00b6 By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the checked text color for each radio button. segmented < ListItem >( 1 ) { checkedTextColor = Color . WHITE } Corner Radius \u00b6 By default this is the value of R.dimen.elementRadioCornerRadius. Setting this will set the corner radius for each radio button. segmented < ListItem >( 1 ) { cornerRadius = 5f } Text Size \u00b6 By default this is the value of R.dimen.elementTextValueSize. Setting this will set the text size (In SP) for each radio button. segmented < ListItem >( 1 ) { textSize = 12f } Radio Button Padding \u00b6 By default this is the value of R.dimen.elementRadioPadding. Setting this will set the padding for each radio button. segmented < ListItem >( 1 ) { radioButtonPadding = 5 } Radio Group Wrap Content \u00b6 By default this is false. Enable to set the radio group layout_width to \"wrap_content\" segmented < ListItem >( 1 ) { radioGroupWrapContent = true } Width of each radio button \u00b6 By default, this is null which does not set the width. segmented < ListItem >( 1 ) { radioButtonWidth = 180 } Height of each radio button \u00b6 By default, this is null which does not set the height. segmented < ListItem >( 1 ) { radioButtonHeight = 240 } Example \u00b6 Kotlin \u00b6 segmented < ListItem >( 1 ) { options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = ListItem ( id = 1 , name = \"Banana\" ) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormSegmentedElement < ListItem > segmented = new FormSegmentedElement <> ( 1 ); segmented . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); segmented . setValue ( new ListItem ( 1L , \"Banana\" )); elements . add ( segmented );","title":"Segmented"},{"location":"element/segmented/#horizontal","text":"By default this is true. Setting this to false will stack the radio buttons vertically. segmented < ListItem >( 1 ) { horizontal = false }","title":"Horizontal"},{"location":"element/segmented/#fill-space","text":"By default this is false. Setting this to true will fill the whole width. segmented < ListItem >( 1 ) { fillSpace = true }","title":"Fill Space"},{"location":"element/segmented/#drawable-direction","text":"By default this is DrawableDirection.Top. Setting this will change where the drawable is displayed relative to the text. Center DrawableDirection.Center will center the drawable. This also removes the text. segmented < ListItem >( 1 ) { drawableDirection = FormSegmentedElement . DrawableDirection . Top }","title":"Drawable Direction"},{"location":"element/segmented/#tint-color","text":"By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the tint color for each radio button. segmented < ListItem >( 1 ) { tintColor = Color . BLUE }","title":"Tint Color"},{"location":"element/segmented/#margin-stroke","text":"By default this is the value of R.dimen.elementRadioStrokeBorder. Setting this will set the margin (stroke) for each radio button. segmented < ListItem >( 1 ) { marginDp = 5 }","title":"Margin (Stroke)"},{"location":"element/segmented/#unchecked-tint-color","text":"By default this is the value of R.color.colorFormMasterElementRadioUnSelected. Setting this will set the unchecked tint color for each radio button. segmented < ListItem >( 1 ) { unCheckedTintColor = Color . WHITE }","title":"Unchecked Tint Color"},{"location":"element/segmented/#checked-text-color","text":"By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the checked text color for each radio button. segmented < ListItem >( 1 ) { checkedTextColor = Color . WHITE }","title":"Checked Text Color"},{"location":"element/segmented/#corner-radius","text":"By default this is the value of R.dimen.elementRadioCornerRadius. Setting this will set the corner radius for each radio button. segmented < ListItem >( 1 ) { cornerRadius = 5f }","title":"Corner Radius"},{"location":"element/segmented/#text-size","text":"By default this is the value of R.dimen.elementTextValueSize. Setting this will set the text size (In SP) for each radio button. segmented < ListItem >( 1 ) { textSize = 12f }","title":"Text Size"},{"location":"element/segmented/#radio-button-padding","text":"By default this is the value of R.dimen.elementRadioPadding. Setting this will set the padding for each radio button. segmented < ListItem >( 1 ) { radioButtonPadding = 5 }","title":"Radio Button Padding"},{"location":"element/segmented/#radio-group-wrap-content","text":"By default this is false. Enable to set the radio group layout_width to \"wrap_content\" segmented < ListItem >( 1 ) { radioGroupWrapContent = true }","title":"Radio Group Wrap Content"},{"location":"element/segmented/#width-of-each-radio-button","text":"By default, this is null which does not set the width. segmented < ListItem >( 1 ) { radioButtonWidth = 180 }","title":"Width of each radio button"},{"location":"element/segmented/#height-of-each-radio-button","text":"By default, this is null which does not set the height. segmented < ListItem >( 1 ) { radioButtonHeight = 240 }","title":"Height of each radio button"},{"location":"element/segmented/#example","text":"","title":"Example"},{"location":"element/segmented/#kotlin","text":"segmented < ListItem >( 1 ) { options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = ListItem ( id = 1 , name = \"Banana\" ) }","title":"Kotlin"},{"location":"element/segmented/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormSegmentedElement < ListItem > segmented = new FormSegmentedElement <> ( 1 ); segmented . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); segmented . setValue ( new ListItem ( 1L , \"Banana\" )); elements . add ( segmented );","title":"Java"},{"location":"element/segmentedInlineTitle/","text":"The Segmented Inline Title form element is used for a radio group with an inline title (The normal segmented element has the title above the radio buttons). NOTICE The ListItem class is provided in the example app. Your custom class just needs to override toString() to display in the segmentedInlineTitle group. SegmentedDrawable The SegmentedDrawable interface must be implemented by your custom class to provide the drawableRes. Example: fruitsSegmented[0].drawableRes = R.drawable.icons8_banana Horizontal \u00b6 By default this is true. Setting this to false will stack the radio buttons vertically. segmentedInlineTitle < ListItem >( 1 ) { horizontal = false } Fill Space \u00b6 By default this is false. Setting this to true will fill the whole width. segmentedInlineTitle < ListItem >( 1 ) { fillSpace = true } Drawable Direction \u00b6 By default this is DrawableDirection.Top. Setting this will change where the drawable is displayed relative to the text. Center DrawableDirection.Center will center the drawable. This also removes the text. segmentedInlineTitle < ListItem >( 1 ) { drawableDirection = FormSegmentedElement . DrawableDirection . Top } Tint Color \u00b6 By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the tint color for each radio button. segmentedInlineTitle < ListItem >( 1 ) { tintColor = Color . BLUE } Margin (Stroke) \u00b6 By default this is the value of R.dimen.elementRadioStrokeBorder. Setting this will set the margin (stroke) for each radio button. segmentedInlineTitle < ListItem >( 1 ) { marginDp = 5 } Unchecked Tint Color \u00b6 By default this is the value of R.color.colorFormMasterElementRadioUnSelected. Setting this will set the unchecked tint color for each radio button. segmentedInlineTitle < ListItem >( 1 ) { unCheckedTintColor = Color . WHITE } Checked Text Color \u00b6 By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the checked text color for each radio button. segmentedInlineTitle < ListItem >( 1 ) { checkedTextColor = Color . WHITE } Corner Radius \u00b6 By default this is the value of R.dimen.elementRadioCornerRadius. Setting this will set the corner radius for each radio button. segmentedInlineTitle < ListItem >( 1 ) { cornerRadius = 5f } Text Size \u00b6 By default this is the value of R.dimen.elementTextValueSize. Setting this will set the text size (In SP) for each radio button. segmentedInlineTitle < ListItem >( 1 ) { textSize = 12f } Radio Button Padding \u00b6 By default this is the value of R.dimen.elementRadioPadding. Setting this will set the padding for each radio button. segmentedInlineTitle < ListItem >( 1 ) { radioButtonPadding = 5 } Radio Group Wrap Content \u00b6 By default this is false. Enable to set the radio group layout_width to \"wrap_content\" segmentedInlineTitle < ListItem >( 1 ) { radioGroupWrapContent = true } Width of each radio button \u00b6 By default, this is null which does not set the width. segmentedInlineTitle < ListItem >( 1 ) { radioButtonWidth = 180 } Height of each radio button \u00b6 By default, this is null which does not set the height. segmentedInlineTitle < ListItem >( 1 ) { radioButtonHeight = 240 } Example \u00b6 Kotlin \u00b6 segmentedInlineTitle < ListItem >( 1 ) { options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = ListItem ( id = 1 , name = \"Banana\" ) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormSegmentedInlineTitleElement < ListItem > segmentedInlineTitle = new FormSegmentedInlineTitleElement <> ( 1 ); segmentedInlineTitle . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); segmentedInlineTitle . setValue ( new ListItem ( 1L , \"Banana\" )); elements . add ( segmentedInlineTitle );","title":"SegmentedInlineTitle"},{"location":"element/segmentedInlineTitle/#horizontal","text":"By default this is true. Setting this to false will stack the radio buttons vertically. segmentedInlineTitle < ListItem >( 1 ) { horizontal = false }","title":"Horizontal"},{"location":"element/segmentedInlineTitle/#fill-space","text":"By default this is false. Setting this to true will fill the whole width. segmentedInlineTitle < ListItem >( 1 ) { fillSpace = true }","title":"Fill Space"},{"location":"element/segmentedInlineTitle/#drawable-direction","text":"By default this is DrawableDirection.Top. Setting this will change where the drawable is displayed relative to the text. Center DrawableDirection.Center will center the drawable. This also removes the text. segmentedInlineTitle < ListItem >( 1 ) { drawableDirection = FormSegmentedElement . DrawableDirection . Top }","title":"Drawable Direction"},{"location":"element/segmentedInlineTitle/#tint-color","text":"By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the tint color for each radio button. segmentedInlineTitle < ListItem >( 1 ) { tintColor = Color . BLUE }","title":"Tint Color"},{"location":"element/segmentedInlineTitle/#margin-stroke","text":"By default this is the value of R.dimen.elementRadioStrokeBorder. Setting this will set the margin (stroke) for each radio button. segmentedInlineTitle < ListItem >( 1 ) { marginDp = 5 }","title":"Margin (Stroke)"},{"location":"element/segmentedInlineTitle/#unchecked-tint-color","text":"By default this is the value of R.color.colorFormMasterElementRadioUnSelected. Setting this will set the unchecked tint color for each radio button. segmentedInlineTitle < ListItem >( 1 ) { unCheckedTintColor = Color . WHITE }","title":"Unchecked Tint Color"},{"location":"element/segmentedInlineTitle/#checked-text-color","text":"By default this is the value of R.color.colorFormMasterElementRadioSelected. Setting this will set the checked text color for each radio button. segmentedInlineTitle < ListItem >( 1 ) { checkedTextColor = Color . WHITE }","title":"Checked Text Color"},{"location":"element/segmentedInlineTitle/#corner-radius","text":"By default this is the value of R.dimen.elementRadioCornerRadius. Setting this will set the corner radius for each radio button. segmentedInlineTitle < ListItem >( 1 ) { cornerRadius = 5f }","title":"Corner Radius"},{"location":"element/segmentedInlineTitle/#text-size","text":"By default this is the value of R.dimen.elementTextValueSize. Setting this will set the text size (In SP) for each radio button. segmentedInlineTitle < ListItem >( 1 ) { textSize = 12f }","title":"Text Size"},{"location":"element/segmentedInlineTitle/#radio-button-padding","text":"By default this is the value of R.dimen.elementRadioPadding. Setting this will set the padding for each radio button. segmentedInlineTitle < ListItem >( 1 ) { radioButtonPadding = 5 }","title":"Radio Button Padding"},{"location":"element/segmentedInlineTitle/#radio-group-wrap-content","text":"By default this is false. Enable to set the radio group layout_width to \"wrap_content\" segmentedInlineTitle < ListItem >( 1 ) { radioGroupWrapContent = true }","title":"Radio Group Wrap Content"},{"location":"element/segmentedInlineTitle/#width-of-each-radio-button","text":"By default, this is null which does not set the width. segmentedInlineTitle < ListItem >( 1 ) { radioButtonWidth = 180 }","title":"Width of each radio button"},{"location":"element/segmentedInlineTitle/#height-of-each-radio-button","text":"By default, this is null which does not set the height. segmentedInlineTitle < ListItem >( 1 ) { radioButtonHeight = 240 }","title":"Height of each radio button"},{"location":"element/segmentedInlineTitle/#example","text":"","title":"Example"},{"location":"element/segmentedInlineTitle/#kotlin","text":"segmentedInlineTitle < ListItem >( 1 ) { options = listOf ( ListItem ( id = 1 , name = \"Banana\" ), ListItem ( id = 2 , name = \"Orange\" )) value = ListItem ( id = 1 , name = \"Banana\" ) }","title":"Kotlin"},{"location":"element/segmentedInlineTitle/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormSegmentedInlineTitleElement < ListItem > segmentedInlineTitle = new FormSegmentedInlineTitleElement <> ( 1 ); segmentedInlineTitle . setOptions ( Arrays . asList ( new ListItem ( 1L , \"Banana\" ), new ListItem ( 2L , \"Orange\" ))); segmentedInlineTitle . setValue ( new ListItem ( 1L , \"Banana\" )); elements . add ( segmentedInlineTitle );","title":"Java"},{"location":"element/singleLine/","text":"The Single Line form element is used for a single line value field. Example \u00b6 Kotlin \u00b6 text ( 1 ) { value = \"Example\" } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormSingleLineEditTextElement text = new FormSingleLineEditTextElement ( 1 ); text . setValue ( \"Example\" ); elements . add ( text );","title":"Single Line"},{"location":"element/singleLine/#example","text":"","title":"Example"},{"location":"element/singleLine/#kotlin","text":"text ( 1 ) { value = \"Example\" }","title":"Kotlin"},{"location":"element/singleLine/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormSingleLineEditTextElement text = new FormSingleLineEditTextElement ( 1 ); text . setValue ( \"Example\" ); elements . add ( text );","title":"Java"},{"location":"element/slider/","text":"The Slider form element is used for a slider (SeekBar) row. Min \u00b6 Min is the minimum number for the slider. Max \u00b6 Max is the maximum number for the slider. Steps \u00b6 Steps are the number of places in the slider. In the example, the slider will step from 0, 5, 10, 15...100. NOTE: incrementBy must be null. Use steps or incrementBy, not both. IncrementBy \u00b6 Increment by is the number to increase the value by. In the example, the slider will step from 0, 5, 10, 15...100. NOTE: steps must be null. Use steps or incrementBy, not both. Example \u00b6 Kotlin \u00b6 slider ( 1 ) { value = 50 min = 0 max = 100 steps = 20 // or incrementBy = 5 } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormSliderElement slider = new FormSliderElement ( 1 ); slider . setValue ( 50 ); slider . setMin ( 0 ); slider . setMax ( 100 ); slider . setSteps ( 20 ); // or slider.setIncrementBy(5); elements . add ( slider );","title":"Slider"},{"location":"element/slider/#min","text":"Min is the minimum number for the slider.","title":"Min"},{"location":"element/slider/#max","text":"Max is the maximum number for the slider.","title":"Max"},{"location":"element/slider/#steps","text":"Steps are the number of places in the slider. In the example, the slider will step from 0, 5, 10, 15...100. NOTE: incrementBy must be null. Use steps or incrementBy, not both.","title":"Steps"},{"location":"element/slider/#incrementby","text":"Increment by is the number to increase the value by. In the example, the slider will step from 0, 5, 10, 15...100. NOTE: steps must be null. Use steps or incrementBy, not both.","title":"IncrementBy"},{"location":"element/slider/#example","text":"","title":"Example"},{"location":"element/slider/#kotlin","text":"slider ( 1 ) { value = 50 min = 0 max = 100 steps = 20 // or incrementBy = 5 }","title":"Kotlin"},{"location":"element/slider/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormSliderElement slider = new FormSliderElement ( 1 ); slider . setValue ( 50 ); slider . setMin ( 0 ); slider . setMax ( 100 ); slider . setSteps ( 20 ); // or slider.setIncrementBy(5); elements . add ( slider );","title":"Java"},{"location":"element/switch/","text":"The Switch form element is used for a toggle switch row. On and Off Values \u00b6 The value is set to onValue when checked. The value is set to offValue when unChecked. Example \u00b6 Kotlin \u00b6 switch < String >( 1 ) { value = \"Yes\" onValue = \"Yes\" offValue = \"No\" } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormSwitchElement < String > switchElement = new FormSwitchElement <> ( 1 ); switchElement . setValue ( \"Yes\" ); switchElement . setOnValue ( \"Yes\" ); switchElement . setOffValue ( \"No\" ); elements . add ( switchElement );","title":"Switch"},{"location":"element/switch/#on-and-off-values","text":"The value is set to onValue when checked. The value is set to offValue when unChecked.","title":"On and Off Values"},{"location":"element/switch/#example","text":"","title":"Example"},{"location":"element/switch/#kotlin","text":"switch < String >( 1 ) { value = \"Yes\" onValue = \"Yes\" offValue = \"No\" }","title":"Kotlin"},{"location":"element/switch/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormSwitchElement < String > switchElement = new FormSwitchElement <> ( 1 ); switchElement . setValue ( \"Yes\" ); switchElement . setOnValue ( \"Yes\" ); switchElement . setOffValue ( \"No\" ); elements . add ( switchElement );","title":"Java"},{"location":"element/textView/","text":"The Text View form element is used for a readonly text value field. Example \u00b6 Kotlin \u00b6 textView ( 1 ) { value = \"Example\" } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormTextViewElement textView = new FormTextViewElement ( 1 ); textView . setValue ( \"Example\" ); elements . add ( textView );","title":"Text View"},{"location":"element/textView/#example","text":"","title":"Example"},{"location":"element/textView/#kotlin","text":"textView ( 1 ) { value = \"Example\" }","title":"Kotlin"},{"location":"element/textView/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormTextViewElement textView = new FormTextViewElement ( 1 ); textView . setValue ( \"Example\" ); elements . add ( textView );","title":"Java"},{"location":"element/time/","text":"The Time form element is used for a time dialog. Theme \u00b6 Set this override the default alert dialog theme. time ( 1 ) { theme = R . style . CustomDialogPicker } Value You can set value directly by creating a new instance of FormPickerTimeElement.TimeHolder. However, dateValue and dateFormat will create the instance for you. Call getTime() on value to get a Date object back. Date Value \u00b6 A java.util.Date value. Date Format \u00b6 A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format. Is 24 Hour View \u00b6 If true, displays the time dialog in the 24 hour view. By default this is false. Start Date \u00b6 A java.util.Date to use if the date value is null. This will set the time picker to this date without showing a value on the form. Example \u00b6 Kotlin \u00b6 time ( 1 ) { dateValue = Date () dateFormat = SimpleDateFormat ( \"hh:mm a\" , Locale . US ) } Java \u00b6 List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerTimeElement time = new FormPickerTimeElement ( 1 ); time . setDateValue ( new Date ()); time . setDateFormat ( new SimpleDateFormat ( \"hh:mm a\" , Locale . US )); elements . add ( time );","title":"Time"},{"location":"element/time/#theme","text":"Set this override the default alert dialog theme. time ( 1 ) { theme = R . style . CustomDialogPicker } Value You can set value directly by creating a new instance of FormPickerTimeElement.TimeHolder. However, dateValue and dateFormat will create the instance for you. Call getTime() on value to get a Date object back.","title":"Theme"},{"location":"element/time/#date-value","text":"A java.util.Date value.","title":"Date Value"},{"location":"element/time/#date-format","text":"A java.text.DateFormat value. By default this is SimpleDateFormat.getDateInstance(). It is advised to provide your own format.","title":"Date Format"},{"location":"element/time/#is-24-hour-view","text":"If true, displays the time dialog in the 24 hour view. By default this is false.","title":"Is 24 Hour View"},{"location":"element/time/#start-date","text":"A java.util.Date to use if the date value is null. This will set the time picker to this date without showing a value on the form.","title":"Start Date"},{"location":"element/time/#example","text":"","title":"Example"},{"location":"element/time/#kotlin","text":"time ( 1 ) { dateValue = Date () dateFormat = SimpleDateFormat ( \"hh:mm a\" , Locale . US ) }","title":"Kotlin"},{"location":"element/time/#java","text":"List < BaseFormElement <?>> elements = new ArrayList <> (); FormPickerTimeElement time = new FormPickerTimeElement ( 1 ); time . setDateValue ( new Date ()); time . setDateFormat ( new SimpleDateFormat ( \"hh:mm a\" , Locale . US )); elements . add ( time );","title":"Java"}]}